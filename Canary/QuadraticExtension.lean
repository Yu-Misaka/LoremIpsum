import Mathlib.Algebra.CharP.IntermediateField
import Mathlib.Algebra.GroupWithZero.Action.Faithful
import Mathlib.Algebra.Lie.OfAssociative
import Mathlib.Algebra.Polynomial.Eval.Irreducible
import Mathlib.Algebra.Polynomial.SpecificDegree
import Mathlib.Analysis.CStarAlgebra.Classes
import Mathlib.Analysis.SpecialFunctions.Pow.Complex
import Mathlib.Data.Int.Lemmas
import Mathlib.Data.Int.Star
import Mathlib.NumberTheory.Multiplicity
import Mathlib.NumberTheory.NumberField.Discriminant.Defs
import Mathlib.Order.CompletePartialOrder
import Mathlib.RingTheory.DedekindDomain.Dvr
import Mathlib.Tactic.Qify

/-!
# Discriminate of quadratic extensions

This file contains results concerning discriminate of quadratic extensions, i.e.,
extensions of ‚Ñö of degree 2. It can be easily deduced that any quadratic extension
can be viewed as an extension of ‚Ñö by the square root of a square free integer.

# Main results

- `quadratic.repr` : In a quadratic extension `S` over `R` with power basis `base`,
  any element `Œ±` can be written as `r + s * adj`, where `r, s ‚àà R` and `adj` is the
  generator of the power basis.

- `Q.repr` : For any element `Œ±` in `‚Ñö(‚àöd)` (`d` a square free integer that is not 1),
  there exists integers `a`, `b` and natural number `c` such that `Œ± = (a + b * ‚àöd) / c`.
  Whats more, `gac(a, b, c) = 1`.

- `Q.minpoly_div` : Under the notation of `Q.repr`, the minimal polynomial of `Œ±` divides
  `X ^ 2 - (2a / c) X + ((a ^ 2 - (b ^ 2) d) / (c ^ 2))`.
  When `Œ±` is not rational, `Q.minpoly_of_not_mem` shows that the above polynomial is
  precisely the minimal polynomial of `Œ±`.

- `minpoly_of_int` : An element `Œ±` in `‚Ñö(‚àöd)` is an algebraic integer iff its polynomial
  has coefficients in `‚Ñ§`.

- `minpoly_of_int'` : Under the notation of `Q.repr`, if `Œ±` is algebraic integer but not
  rational, then `c ‚à£ 2 * a` and `c ^ 2 ‚à£ a ^ 2 - (b ^ 2) * d`.

- `Z‚ÇÅ.ring_of_int'` : Under the notation of `Q.repr`, when `¬¨ d ‚â° 1 [ZMOD 4]`,
  the ring of integers of `‚Ñö(‚àöd)` (`ùìû ‚Ñö(‚àöd)`) is `‚Ñ§`-isomorphic to `‚Ñ§[‚àöd]`.

- `Z‚ÇÅ.final` : Under the notation of `Q.repr`, when `¬¨ d ‚â° 1 [ZMOD 4]`,
  the discriminate of `‚Ñö(‚àöd)` is `4 * d`.

- `Z‚ÇÇ.ring_of_int` : Under the notation of `Q.repr`, when `d ‚â° 1 [ZMOD 4]`,
  the ring of integers of `‚Ñö(‚àöd)` (`ùìû ‚Ñö(‚àöd)`) is `‚Ñ§`-isomorphic to `‚Ñ§[(1 + ‚àöd) / 2]`.

- `Z‚ÇÇ.final` : Under the notation of `Q.repr`, when `d ‚â° 1 [ZMOD 4]`,
  the discriminate of `‚Ñö(‚àöd)` is `d`.

- `quadratic_discr` : The discriminate of `‚Ñö(‚àöd)` for square free integer `d` is
  `4 * d` when `¬¨ d ‚â° 1 [ZMOD 4]`, and `d` when `d ‚â° 1 [ZMOD 4]`. This relax the condition
  that `d` is not 1 in `Z‚ÇÅ.final` and `Z‚ÇÇ.final`.
-/

open IntermediateField Polynomial PowerBasis NumberField

section quadratic

/-- A helper lemma to change the type `Fin l` to `Fin n` in a sum, when `n = l`. -/
theorem finChange {l n : ‚Ñï} (hl : n = l) {T : Type*} {f : Fin l ‚Üí T} [AddCommMonoid T] :
  ‚àë i : Fin l, f i = ‚àë i : Fin n, f ((finCongr hl).toFun i) :=
    (Fin.sum_congr' f hl).symm

-- Variables for a general quadratic extension S/R
variable {R S : Type*} [CommRing R] [Ring S] [Algebra R S]
variable {base : PowerBasis R S} (hdim : 2 = dim base)

include hdim

/-- The first element of the power basis `base` (corresponding to `gen ^ 0`) is 1. -/
private theorem base_equiv_zero : (basis base) (finCongr hdim 0) = 1 := by
  -- Use hdim to prove index is in bounds
  have : (finCongr hdim 0) = ‚ü®0, by rw [‚Üê hdim]; omega‚ü© := rfl
  rw [this, basis_eq_pow base _] -- Basis element is power of generator
  simp only [pow_zero] -- gen ^ 0 = 1

/-- Abbreviation for the second element of the power basis (the generator `gen ^ 1`). -/
noncomputable abbrev adj := (basis base) (finCongr hdim 1)

/-- In a quadratic extension `S` over `R` with power basis `base`, any element `Œ±` can be
written as `r + s * adj`, where `r, s ‚àà R` and `adj` is the generator of the power basis. -/
theorem quadratic.repr (Œ± : S) :
    ‚àÉ r s : R, Œ± = (algebraMap R S) r + s ‚Ä¢ (adj hdim) := by
  have := Module.Basis.sum_repr (basis base) Œ± -- Express Œ± in the basis `base`
  have foo : ‚àÄ r : R, r ‚Ä¢ (1 : S) = (algebraMap R S) r := fun r ‚Ü¶
    (Algebra.algebraMap_eq_smul_one r).symm -- Scalar action is same as algebra map for 1
  rw [finChange hdim, Fin.sum_univ_two, -- Change sum type and expand for Fin 2
    show (finCongr hdim).toFun = finCongr hdim by rfl, base_equiv_zero hdim, foo] at this
  -- The representation is r * base[0] + s * base[1] = r * 1 + s * adj
  exact ‚ü®((basis base).repr Œ±) (finCongr hdim 0),
    ((basis base).repr Œ±) (finCongr hdim 1), this.symm‚ü©

end quadratic

-- Let `d` be a square-free integer
variable {d : ‚Ñ§} (sqf : Squarefree d)

-- Notation for the polynomial `X ^ 2 - d` over ‚Ñö
local notation: max "poly" => X ^ 2 - C (d : ‚Ñö)
-- Notation for the complex square root
local notation: max "‚àö[" i "]" =>  ((i : ‚ÑÇ) ^ ((1 / 2) : ‚ÑÇ))
-- Notation for the polynomial `X ^ 2 - (2a / c) X + (a ^ 2 - (b ^ 2) d) / (c ^ 2)` over ‚Ñö
local notation: max "minpo(" a"," b"," c ")" =>
  X ^ 2 - C ((2 * a : ‚Ñö) / (c : ‚Ñö)) * X + C ((a ^ 2 - (b ^ 2) * d) / (c ^ 2 : ‚Ñö))

/-- Factors the polynomial `minpo(a, b, c)` over the complex numbers.
The roots are `(a ¬± b‚àöd) / c`. -/
theorem minpoly_break {a b c : ‚Ñö} : Polynomial.map (algebraMap ‚Ñö ‚ÑÇ) minpo(a, b, c) =
    (X - C ((a + b * ‚àö[d]) / c)) * (X - C ((a - b * ‚àö[d]) / c)) := by
  -- Map polynomial operations over ‚ÑÇ
  simp only [Polynomial.map_add, Polynomial.map_sub, Polynomial.map_pow, map_X,
    Polynomial.map_mul, map_C, map_div‚ÇÄ, eq_ratCast, Rat.cast_mul, Rat.cast_ofNat,
    Rat.cast_sub, Rat.cast_pow, Rat.cast_intCast, one_div]
  rw [sub_mul, mul_sub, mul_sub, ‚Üê C_mul, mul_comm X (C _), sub_sub,
    ‚Üê add_sub_assoc, ‚Üê add_mul, ‚Üê C_add, ‚Üê sq, div_add_div_same]
  conv =>
    enter [2, 2, 1, 1] -- Target the coefficient of X
    ring_nf
  conv =>
    enter [2, 2, 2, 2] -- Target the constant coefficient
    ring_nf
    rw [inv_pow, one_div, Complex.cpow_ofNat_inv_pow, ‚Üê sub_mul]
  ring_nf

/-- The algebra map from the quadratic field `‚Ñö(‚àöd)` to `‚ÑÇ` is injective. -/
theorem algMap_inj : Function.Injective (algebraMap ‚Ñö‚üÆ‚àö[d]‚üØ ‚ÑÇ) :=
  FaithfulSMul.algebraMap_injective ‚Ñö‚üÆ‚àö[d]‚üØ ‚ÑÇ

section nontrivial

-- Assume `d` is not 1 (so the extension is nontrivial)
variable (one : d ‚â† 1)

namespace Q -- Results specific to the field `‚Ñö(‚àöd)`

/-- The polynomial `X ^ 2 - d` has degree 2 over ‚Ñö. -/
private theorem poly_natDegree : natDegree poly = 2 := natDegree_X_pow_sub_C
/-- The polynomial `X ^ 2 - d` is monic. -/
private theorem poly_Monic : Monic poly := by monicity!
/-- `‚àöd` (as a complex number) is integral over ‚Ñö, witnessed by `poly`. -/
private theorem integral : IsIntegral ‚Ñö ‚àö[d] := by
  refine isAlgebraic_iff_isIntegral.1 ‚ü®poly, Monic.ne_zero poly_Monic, ?_‚ü© -- Use poly
  simp only [one_div, map_intCast, map_sub, map_pow, aeval_X, Complex.cpow_ofNat_inv_pow,
    sub_self] -- Evaluate poly at ‚àöd, it's zero

/-- The extension `‚Ñö(‚àöd)` is finite-dimensional over `‚Ñö`. -/
instance : Module.Finite ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ := adjoin.finiteDimensional integral
/-- `‚Ñö(‚àöd)` is a number field. -/
instance : NumberField ‚Ñö‚üÆ‚àö[d]‚üØ := NumberField.mk

-- Power basis `{1, ‚àöd}` for `‚Ñö(‚àöd)` over ‚Ñö
local notation3 "base" => adjoin.powerBasis integral (x := ‚àö[d])
-- Generator `Œ¥ = ‚àöd` as an element of `‚Ñö(‚àöd)`
local notation3 "Œ¥" => AdjoinSimple.gen ‚Ñö ‚àö[d]

/-- The square of the generator `Œ¥` is `d`. -/
private theorem sqd_sq : Œ¥ ^ 2 = d := by
  apply SetLike.coe_eq_coe.1 -- Work with the underlying complex numbers
  change (‚àö[d]) ^ 2 = d
  simp only [one_div, Complex.cpow_ofNat_inv_pow] -- `‚àöd ^ 2 = d`

include one sqf

/-- For a square-free integer `d ‚â† 1`, `a ^ 2 - d ‚â† 0` for any rational `a`.
This ensures `‚àöd` is not rational. -/
private theorem rat_sq_sub_ne_zero (a : ‚Ñö) : a ^ 2 - d ‚â† 0 := by
  by_contra! h -- Assume `a ^ 2 - d = 0`, so `a ^ 2 = d`
  -- Write `a = num / den`
  apply_fun (¬∑ + (d : ‚Ñö)) at h
  rw [sub_add_cancel, zero_add, ‚Üê Rat.num_div_den a, div_pow] at h
  apply_fun (¬∑ * (a.den : ‚Ñö) ^ 2) at h -- Clear denominators
  simp only [isUnit_iff_ne_zero, ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true, pow_eq_zero_iff,
    Nat.cast_eq_zero, Rat.den_ne_zero, IsUnit.div_mul_cancel] at h -- Simplify
  norm_cast at h -- h is now `a.num ^ 2 = d * (a.den ^ 2)`
  -- This implies `d` divides `a.num ^ 2`, so `d` must divide `a.num` (since d is square-free)
  -- But since `a = num / den` is reduced, `gcd(num, den) = 1`.
  -- We deduce `|num| = 1` and `den = 1` (requires detailed Squarefree argument).
  have dvd : a.num * a.num ‚à£ d * (a.den ^ 2) :=
    ‚ü®1, by rw [mul_one, ‚Üê pow_two]; exact h.symm‚ü©
  replace dvd : a.num.natAbs ‚à£ a.den ^ 2 := Int.ofNat_dvd_right.1 <|
    Squarefree.dvd_of_squarefree_of_mul_dvd_mul_right sqf dvd -- Key step using squarefree
  rw [pow_two] at dvd
  -- Since `gcd(num, den) = 1`, `gcd(num, den ^ 2) = 1`.
  -- Since `num | den ^ 2`, we must have `num = 1` or `num = -1`.
  replace dvd : a.num.natAbs = 1 := Nat.Coprime.eq_one_of_dvd (Rat.reduced a) <|
    Nat.Coprime.dvd_of_dvd_mul_left (Rat.reduced a) dvd
  -- Substitute back `|num| = 1` into `(a.num) ^ 2 = d * (a.den) ^ 2`
  rw [show a.num ^ 2 = a.num.natAbs ^ 2 by exact Int.natAbs_eq_iff_sq_eq.mp rfl,
    dvd, show @Nat.cast ‚Ñ§ instNatCastInt 1 = 1 by rfl, one_pow,
    Int.eq_one_of_mul_eq_one_left (Int.ofNat_zero_le (a.den ^ 2)) h.symm,
    mul_one] at h
  exact one h.symm -- This contradicts `d ‚â† 1`

/-- `‚àöd` is not a rational number (since `d` is square-free and not 1). -/
private theorem sqrt_d_not_mem : ‚àö[d] ‚àâ (algebraMap ‚Ñö ‚ÑÇ).range := by
  rintro ‚ü®x, hx‚ü© -- Assume `‚àöd = x` for some `x ‚àà ‚Ñö`
  absurd rat_sq_sub_ne_zero sqf one x -- This leads to a contradiction
  apply_fun (¬∑ ^ 2) at hx -- Square both sides: `d = x ^ 2`
  simp only [eq_ratCast, one_div, Complex.cpow_ofNat_inv_pow] at hx
  norm_cast at hx -- hx is now `x ^ 2 = d`
  rw [hx, sub_self] -- So `x ^ 2 - d = 0`, contradicting `rat_sq_sub_ne_zero`

/-- The polynomial `X ^ 2 - d` is irreducible over ‚Ñö. -/
private theorem poly_irr : Irreducible poly := by
  -- A quadratic polynomial is irreducible iff it has no roots in the base field.
  refine (irreducible_iff_roots_eq_zero_of_degree_le_three ?_ ?_).2 ?_
  <;> (try rw [poly_natDegree]); (try omega) -- Degree is 2
  ¬∑ refine Multiset.eq_zero_iff_forall_notMem.2 (fun a ‚Ü¶ ?_) -- Show roots multiset is empty
    by_contra! -- Assume `a` is a root
    simp only [mem_roots', ne_eq, IsRoot.def, eval_sub, eval_pow, eval_X, eval_C] at this
    -- If `a` is a root, then `a ^ 2 - d = 0`
    exact (rat_sq_sub_ne_zero sqf one a) this.2 -- Contradicts previous lemma

/-- The minimal polynomial of `‚àöd` over `‚Ñö` is `X ^ 2 - d`. -/
private theorem poly_min : minpoly ‚Ñö ‚àö[d] = poly := by
  -- Minimal polynomial is the unique monic irreducible polynomial with the element as a root.
  refine (minpoly.eq_of_irreducible_of_monic (poly_irr sqf one) ?_ poly_Monic).symm
  -- Show `‚àöd` is a root of `poly`
  simp only [one_div, map_intCast, map_sub, map_pow, aeval_X, Complex.cpow_ofNat_inv_pow,
    sub_self]

/-- The dimension of the power basis `base` (i.e., the degree of the extension) is 2. -/
private theorem base_dim : 2 = dim base :=
  have : Module.finrank ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ = 2 :=
    -- Finrank is the degree of the minimal polynomial
    poly_natDegree ‚ñ∏ poly_min sqf one ‚ñ∏ adjoin.finrank integral
  this ‚ñ∏ finrank base -- Power basis dimension equals field extension degree

/-- The second element of the power basis `base` is the generator `Œ¥ = ‚àöd`. -/
private theorem base_equiv_one : adj (base_dim sqf one) = Œ¥ := by
  have : (finCongr (base_dim sqf one) 1) =
    ‚ü®1, by rw [‚Üê base_dim sqf one]; omega‚ü© := rfl -- Index 1 is valid
  rw [adj, this, basis_eq_pow base _] -- Definition of `adj` and basis element
  simp only [adjoin.powerBasis_gen, pow_one] -- `gen ^ 1 = gen = Œ¥`

/-- Any element `Œ±` in `‚Ñö(‚àöd)` can be written as `r + s * ‚àöd` with `r, s ‚àà ‚Ñö`. -/
private theorem linear_comb (Œ± : ‚Ñö‚üÆ‚àö[d]‚üØ) : ‚àÉ r s : ‚Ñö, Œ± = r + s * Œ¥ := by
  have := quadratic.repr (base_dim sqf one) Œ± -- Apply general quadratic representation
  rwa [base_equiv_one sqf one] at this -- Substitute the generator

/-- Any element `Œ±` in `‚Ñö(‚àöd)` can be written as `(a + b * ‚àöd) / c` with
`a, b ‚àà ‚Ñ§`, `c ‚àà ‚Ñï`, `c ‚â† 0`. -/
private theorem int_linear_comb (Œ± : ‚Ñö‚üÆ‚àö[d]‚üØ) :
    ‚àÉ a b : ‚Ñ§, ‚àÉ c : ‚Ñï, Œ± = (a + b * Œ¥) / (c : ‚Ñö) ‚àß c ‚â† 0 := by
  obtain ‚ü®r, s, hrs‚ü© := linear_comb sqf one Œ± -- Get `r, s ‚àà ‚Ñö`
  rw [‚Üê Rat.num_div_den r, ‚Üê Rat.num_div_den s] at hrs -- Write `r, s` as fractions
  -- Combine fractions over a common denominator `r.den * s.den`
  have : Œ± = (r.num * s.den + s.num * r.den * Œ¥) / (r.den * s.den : ‚Ñö) := by
    rw [hrs] -- Substitute `hrs`
    field_simp -- Simplify the expression
    exact mul_right_comm _ Œ¥ _ -- Ensure `Œ¥` multiplies the numerator term
  -- Define `a, b, c`
  refine ‚ü®r.num * s.den, s.num * r.den, r.den * s.den, ‚ü®?_, Nat.mul_ne_zero r.den_nz s.den_nz‚ü©‚ü©
  convert this <;> norm_cast -- Check the expression matches and cast types

/-- Representation of `Œ± ‚àà ‚Ñö(‚àöd)` as `(a + b‚àöd) / c` where `a, b ‚àà ‚Ñ§`, `c ‚àà ‚Ñï`, `c ‚â† 0`,
and `gcd(a, b, c) = 1` (i.e., no integer other than `¬±1` divides all three). -/
private theorem repr (Œ± : ‚Ñö‚üÆ‚àö[d]‚üØ) : ‚àÉ a b : ‚Ñ§, ‚àÉ c : ‚Ñï,
    Œ± = (a + b * Œ¥) / (c : ‚Ñö) ‚àß
    c ‚â† 0 ‚àß
    ‚àÄ n : ‚Ñ§, n ‚à£ a ‚àß n ‚à£ b ‚àß n ‚à£ c ‚Üí IsUnit n := by
  obtain ‚ü®a, b, c, habc, hc_zero‚ü© := int_linear_comb sqf one Œ± -- Get `a, b, c`
  set e := (a.gcd b : ‚Ñ§).gcd c with def_e -- Calculate `gcd(a, b, c)`
  -- Divide a, b, c by their gcd `e`
  obtain ‚ü®a', ha‚ü© : (e : ‚Ñ§) ‚à£ a := by rw [def_e, Int.gcd_assoc]; exact Int.gcd_dvd_left _ _
  obtain ‚ü®b', hb‚ü© : (e : ‚Ñ§) ‚à£ b := by
    rw [def_e, Int.gcd_comm, ‚Üê Int.gcd_assoc]; exact Int.gcd_dvd_right _ _
  obtain ‚ü®c', hc‚ü© : (e : ‚Ñ§) ‚à£ c := by rw [def_e]; exact Int.gcd_dvd_right _ _
  have c_pow : 0 < c' := by -- The new denominator `c'` must be positive
    by_contra! zle -- Assume `c' ‚â§ 0`
    have : e * c' ‚â§ 0 := Int.mul_nonpos_of_nonneg_of_nonpos (Int.ofNat_zero_le e) zle
    rw [‚Üê hc] at this; omega -- `c = e * c' ‚â§ 0`, contradicts `c > 0` (since `c ‚àà ‚Ñï, c ‚â† 0`)
  -- Lift `c' : ‚Ñ§` to `c'' : ‚Ñï`
  obtain ‚ü®c'', hc''‚ü© : ‚àÉ c'' : ‚Ñï, c'' = c' := CanLift.prf c' <| Int.le_of_lt c_pow
  have e_ne_zero : e ‚â† 0 := fun foo ‚Ü¶ by
    -- If `e = 0`, then `c = 0`
    simp only [foo, CharP.cast_eq_zero, zero_mul, Nat.cast_eq_zero] at hc
    exact hc_zero hc -- Contradicts `c ‚â† 0`
  refine ‚ü®a', b', c'', ‚ü®?_, ?_‚ü©‚ü© -- Return the new `a', b', c''`
  ¬∑ -- Check the expression `Œ± = (a' + b' * Œ¥) / c''`
    have : (a' + b' * Œ¥) / (c'' : ‚Ñö) = e * (a' + b' * Œ¥) / (e * (c'' : ‚Ñö)) := by
      -- Multiply numerator and denominator by `e` (as rationals)
      ring_nf
      rw [mul_assoc _ (e : ‚Ñö‚üÆ‚àö[d]‚üØ) _, mul_assoc _ (e : ‚Ñö‚üÆ‚àö[d]‚üØ) _,
        mul_inv_cancel‚ÇÄ <| Nat.cast_ne_zero.mpr e_ne_zero, mul_one, mul_one]
    have foo : @Nat.cast ‚Ñö Rat.instNatCast c'' = @Int.cast ‚Ñö Rat.instIntCast c' :=
      Rat.ext hc'' rfl -- Cast `c''` to ‚Ñö matches cast `c'` to ‚Ñö
    rw [this, mul_add, ‚Üê mul_assoc, foo] -- Distribute `e`
    norm_cast -- Cast types
    rwa [‚Üê ha, ‚Üê hb, ‚Üê hc] -- Substitute back `a = ea'`, `b = eb'`, `c = ec' = ec''`
  ¬∑ constructor
    ¬∑ convert_to (c'' : ‚Ñ§) ‚â† 0
      ¬∑ exact Int.ofNat_eq_zero.symm
      ¬∑ rw [hc'']; exact (Int.ne_of_lt c_pow).symm
    ¬∑ intro n hn
      have : n ‚à£ (a.gcd b) := Int.dvd_coe_gcd_iff.2
        ‚ü®ha.symm ‚ñ∏ dvd_mul_of_dvd_right hn.1 e,
        hb.symm ‚ñ∏ dvd_mul_of_dvd_right hn.2.1 e‚ü©
      have bar := Int.gcd_eq_gcd_ab (a.gcd b) c -- Bezout for `gcd(gcd(a,b), c)`
      rw [‚Üê def_e] at bar -- `e = l‚ÇÅ * gcd(a,b) + l‚ÇÇ * c`
      set l‚ÇÅ := ((a.gcd b) : ‚Ñ§).gcdA c; set l‚ÇÇ := ((a.gcd b) : ‚Ñ§).gcdB c
      rw [Int.gcd_eq_gcd_ab a b] at bar -- `gcd(a,b) = l‚ÇÉ * a + l‚ÇÑ * b`
      set l‚ÇÉ := a.gcdA b; set l‚ÇÑ := a.gcdB b
      -- Substitute Bezout for `gcd(a,b)` into Bezout for `e`
      rw [ha, hb, hc, add_mul, mul_assoc, mul_assoc, mul_assoc, mul_assoc,
        ‚Üê mul_add (e : ‚Ñ§) _, mul_assoc, ‚Üê mul_add (e : ‚Ñ§) _] at bar
      nth_rw 1 [‚Üê mul_one (e : ‚Ñ§)] at bar
      rw [Int.mul_eq_mul_left_iff (Int.ofNat_ne_zero.2 e_ne_zero)] at bar
      -- `n` divides `a', b', c''`
      have := Int.dvd_add
        (Int.dvd_add (Dvd.dvd.mul_right hn.1 (l‚ÇÉ * l‚ÇÅ)) (Dvd.dvd.mul_right hn.2.1 (l‚ÇÑ * l‚ÇÅ)))
        (Dvd.dvd.mul_right hn.2.2 l‚ÇÇ)
      rw [hc'', ‚Üê bar] at this
      exact isUnit_of_dvd_one this

/-- For any `x ‚àà ‚Ñö(‚àöd)`, its minimal polynomial over `‚Ñö` divides the polynomial
`minpo(a, b, c) = X ^ 2 - (2a / c) X + (a ^ 2 - (b ^ 2) d) / (c ^ 2)`,
where `x = (a + b‚àöd) / c` is the representation with `gcd(a, b, c) = 1`. -/
theorem minpoly_div (x : ‚Ñö‚üÆ‚àö[d]‚üØ) : ‚àÉ a b : ‚Ñ§, ‚àÉ c : ‚Ñï,
    minpoly ‚Ñö x ‚à£ minpo(a, b, c) ‚àß
    c ‚â† 0 ‚àß
    (‚àÄ n : ‚Ñ§, n ‚à£ a ‚àß n ‚à£ b ‚àß n ‚à£ c ‚Üí IsUnit n) ‚àß
    x = (a + b * Œ¥) / (c : ‚Ñö) := by
  obtain ‚ü®a, b, c, ‚ü®hx, hc, hn‚ü©‚ü© := repr sqf one x -- Get the coprime representation
  refine ‚ü®a, b, c, ‚ü®minpoly.dvd_iff.2 ?_, hc, hn, hx‚ü©‚ü© -- Use `minpoly.dvd_iff`
  -- We need to show `x` is a root of `minpo(a, b, c)`.
  simp only [hx, Rat.cast_natCast, map_add, map_sub, map_pow, aeval_X, map_mul, aeval_C, map_div‚ÇÄ,
  -- Evaluate the polynomial at `x`
    eq_ratCast, Rat.cast_ofNat, Rat.cast_intCast, map_natCast]
  ring_nf; rw [sqd_sq]; ring -- Simplify the expression, using `Œ¥ ^ 2 = d`. It evaluates to 0.

/-- If `x ‚àà ‚Ñö(‚àöd)` is not rational (i.e., `b ‚â† 0` in the representation), then its minimal
polynomial over `‚Ñö` *is* `minpo(a, b, c)`. -/
private theorem minpoly_of_not_mem {x : ‚Ñö‚üÆ‚àö[d]‚üØ} : x ‚àâ (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range ‚Üí
  ‚àÉ (r : Œ£ (_ : ‚Ñ§) (_ : ‚Ñ§), ‚Ñï),
    minpoly ‚Ñö x = minpo(r.1, r.2.1, r.2.2) ‚àß
    r.2.2 ‚â† 0 ‚àß
    (‚àÄ n : ‚Ñ§, n ‚à£ r.1 ‚àß n ‚à£ r.2.1 ‚àß n ‚à£ r.2.2 ‚Üí IsUnit n) ‚àß
    x = (r.1 + r.2.1 * Œ¥) / (r.2.2 : ‚Ñö) := by
  -- Get `a, b, c` and the divisibility
  obtain ‚ü®a, b, c, ‚ü®hmin, hc, ‚ü®hn, hx‚ü©‚ü©‚ü© := minpoly_div sqf one x
  refine fun h_not_rational ‚Ü¶ ‚ü®‚ü®a, ‚ü®b, c‚ü©‚ü©, ‚ü®?_, hc, hn, hx‚ü©‚ü© -- Return `a, b, c`
  -- Since `x` is not rational, its minimal polynomial has degree ‚â• 2.
  rw [‚Üê minpoly.two_le_natDegree_iff (IsIntegral.of_finite ‚Ñö x)] at h_not_rational
  -- minpoly divides `minpo`, both are monic, minpoly has degree ‚â• 2, `minpo` has degree 2.
  -- Therefore, they must be equal.
  refine (eq_of_monic_of_dvd_of_natDegree_le
    (minpoly.monic (IsIntegral.of_finite ‚Ñö x)) ?_ hmin ?_).symm
  ¬∑ monicity! -- `minpo` is monic
  ¬∑ compute_degree! -- `minpo` has degree 2, which is ‚â• degree of minpoly

/-- Calculates the coefficients `(a, b, c)` such that `minpoly ‚Ñö x = minpo(a, b, c)`
for a non-rational element `x`. -/
noncomputable def calc_min {x : ‚Ñö‚üÆ‚àö[d]‚üØ} (hx : x ‚àâ (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range) :
    Œ£ (_ : ‚Ñ§) (_ : ‚Ñ§), ‚Ñï :=
  Classical.choose <| minpoly_of_not_mem sqf one hx

/-- The properties satisfied by the coefficients `(a, b, c)` returned by `calc_min`. -/
theorem calc_min_prop {x : ‚Ñö‚üÆ‚àö[d]‚üØ} (hx : x ‚àâ (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range) :
  minpoly ‚Ñö x =
    minpo((calc_min sqf one hx).1, (calc_min sqf one hx).2.1, (calc_min sqf one hx).2.2) ‚àß
  (calc_min sqf one hx).2.2 ‚â† 0 ‚àß
  (‚àÄ n : ‚Ñ§, n ‚à£ (calc_min sqf one hx).1 ‚àß n ‚à£
    (calc_min sqf one hx).2.1 ‚àß n ‚à£ (calc_min sqf one hx).2.2 ‚Üí IsUnit n) ‚àß
    x = ((calc_min sqf one hx).1 + (calc_min sqf one hx).2.1 * Œ¥) /
      ((calc_min sqf one hx).2.2 : ‚Ñö) :=
  Classical.choose_spec <| minpoly_of_not_mem sqf one hx

end Q

section aux -- Auxiliary lemmas for integrality conditions

/-- An element `x` in a number field `K` is an algebraic integer iff its minimal polynomial
over `‚Ñö` has integer coefficients when viewed as a polynomial over `‚Ñö`.
(More precisely, `minpoly ‚Ñö x` is the image of `minpoly ‚Ñ§ x` under `map (algebraMap ‚Ñ§ ‚Ñö)`). -/
theorem minpoly_of_int (x : ‚Ñö‚üÆ‚àö[d]‚üØ) : x ‚àà (integralClosure ‚Ñ§ ‚Ñö‚üÆ‚àö[d]‚üØ) ‚Üî
    minpoly ‚Ñö x = Polynomial.map (algebraMap ‚Ñ§ ‚Ñö) (minpoly ‚Ñ§ x) := by
  constructor
  -- Forward direction: If `x` is integral, this property holds.
  ¬∑ exact minpoly.isIntegrallyClosed_eq_field_fractions ‚Ñö (‚Ñö‚üÆ‚àö[d]‚üØ)
  -- Backward direction: If the poly has ‚Ñ§ coeffs, then `x` is integral.
  ¬∑ intro hx
    -- The minimal polynomial over ‚Ñ§ exists and is monic by definition if the condition holds.
    -- We just need to check it's non-zero.
    refine minpoly.ne_zero_iff.1 (fun hzero ‚Ü¶ ?_)
    -- If `minpoly ‚Ñ§ x` were zero, then `minpoly ‚Ñö x `would be zero.
    rw [hzero, algebraMap_int_eq, Polynomial.map_zero] at hx
    -- But `minpoly ‚Ñö x` is non-zero for elements in a finite extension.
    exact False.elim <| (minpoly.ne_zero_of_finite ‚Ñö x) hx

/-- Technical lemma: If `gcd(a, b, c) = 1`, then `gcd(c, a)` is coprime to `b`.
(Using natAbs for gcd arguments). -/
private theorem aux_copri‚ÇÄ {a b : ‚Ñ§} {c : ‚Ñï}
  (hn : ‚àÄ n : ‚Ñ§, n ‚à£ a ‚àß n ‚à£ b ‚àß n ‚à£ c ‚Üí IsUnit n) :
    (c.gcd a.natAbs).Coprime b.natAbs := by
  by_contra not_copri -- Assume `gcd(c, |a|)` and `|b|` are not coprime, i.e., g > 1
  -- `gcd(c, |a|)` divides `|a|`
  have dvd‚ÇÅ : (c.gcd a.natAbs).gcd b.natAbs ‚à£ a.natAbs := by
    rw [Nat.gcd_comm, ‚Üê Nat.gcd_assoc]
    exact Nat.gcd_dvd_right (b.natAbs.gcd c) a.natAbs
  -- `gcd(c, |a|)` divides `|b|`
  have dvd‚ÇÇ : (c.gcd a.natAbs).gcd b.natAbs ‚à£ b.natAbs :=
    Nat.gcd_dvd_right (c.gcd a.natAbs) b.natAbs
  -- `gcd(c, |a|)` divides `c`
  have dvd‚ÇÉ : (c.gcd a.natAbs).gcd b.natAbs ‚à£ c := by
    rw [Nat.gcd_assoc]
    exact Nat.gcd_dvd_left c (a.natAbs.gcd b.natAbs)
  -- Apply the hypothesis `hn` with `n = gcd(c, |a|)` (cast to ‚Ñ§)
  replace hn := hn ((c.gcd a.natAbs).gcd b.natAbs)
    ‚ü®Int.ofNat_dvd_left.2 dvd‚ÇÅ, Int.ofNat_dvd_left.2 dvd‚ÇÇ, Int.ofNat_dvd.2 dvd‚ÇÉ‚ü©
  -- `hn` implies `gcd(c, |a|)` is a unit. In ‚Ñï, this means `gcd(c, |a|) = 1`.
  rw [Int.ofNat_isUnit, Nat.isUnit_iff] at hn
  -- This contradicts `gcd(c, |a|) > 1` (from `not_copri`).
  exact not_copri hn

/-- Technical lemma: If `n = a / c` where `n, a ‚àà ‚Ñ§` and `c ‚àà ‚Ñï+`, then `c ‚à£ a`. -/
private theorem aux_dvd (n : ‚Ñ§) {a : ‚Ñ§} {c : ‚Ñï} (hc : c ‚â† 0) :
    n = (a : ‚Ñö) / (c : ‚Ñö) ‚Üí (c : ‚Ñ§) ‚à£ a := fun h ‚Ü¶ by
  refine ‚ü®n, ?_‚ü© -- We need to show `a = c * n`
  qify -- Convert goal to ‚Ñö
  rw [h] -- Substitute `n = a / c`
  exact (mul_div_cancel_of_imp' fun foo ‚Ü¶ -- Simplify `(a / c) * c = a`
    False.elim (hc <| Rat.natCast_eq_zero.mp foo)).symm -- Requires `c ‚â† 0`

include sqf in
/-- Technical lemma: If `gcd(a, b, c) = 1` and `c ^ 2 ‚à£ a ^ 2 - (b ^ 2) d`, then
`gcd(c, a) = 1`. -/
private theorem aux_copri‚ÇÅ {a b : ‚Ñ§} {c : ‚Ñï}
  (hn : ‚àÄ n : ‚Ñ§, n ‚à£ a ‚àß n ‚à£ b ‚àß n ‚à£ c ‚Üí IsUnit n)
  (hdiv : (c ^ 2 : ‚Ñ§) ‚à£ (a ^ 2 - b ^ 2 * d)) :
    c.Coprime a.natAbs := by
  by_contra! -- Assume `gcd(c, |a|) > 1`
  obtain ‚ü®k', hk'‚ü© := hdiv -- `a ^ 2 - (b ^ 2) d = (c ^ 2) k'`
  -- Rearrange to `(b ^ 2) d = a ^ 2 - (c ^ 2) k'`
  apply_fun (- (- a ^ 2 + ¬∑ )) at hk'
  simp only [Pi.neg_apply, neg_add_rev, neg_sub, neg_neg, sub_add_cancel] at hk'
  -- Show `gcd(c, |a|) ^ 2` divides `(b ^ 2) d`
  have hk'' : ((c.gcd a.natAbs) ^ 2 : ‚Ñ§) ‚à£ b ^ 2 * d := by
    rw [hk'] -- Substitute expression for `(b ^ 2) d`
    -- Show `gcd(c, |a|) ^ 2 ‚à£ a ^ 2` and `gcd(c, |a|) ^ 2 ‚à£ - (c ^ 2) k'`
    refine (Int.dvd_add_right ?_).2 ?_
    ¬∑ -- `gcd(c, |a|) ^ 2 ‚à£ - (c ^ 2) k'`
      refine Int.dvd_neg.2 <| Dvd.dvd.mul_right ?_ k'
      -- Show `gcd(c, |a|) ^ 2 ‚à£ c ^ 2`
      exact (Int.pow_dvd_pow_iff (Nat.zero_ne_add_one 1).symm).2
        <| Int.ofNat_dvd.2 <| Nat.gcd_dvd_left c a.natAbs
    ¬∑ -- `gcd(c, |a|) ^ 2 ‚à£ a ^ 2`
      exact (Int.pow_dvd_pow_iff (Nat.zero_ne_add_one 1).symm).2
        <| Int.ofNat_dvd_left.mpr <| Nat.gcd_dvd_right c a.natAbs
  -- Since `gcd(c, |a|) ^ 2 ‚à£ (b ^ 2) d` and `gcd(gcd(c, |a|), b) = 1` (from `aux_copri‚ÇÄ`),
  -- we must have `gcd(c, |a|) ^ 2 ‚à£ d`.
  replace hk'' := Nat.Coprime.dvd_of_dvd_mul_left
    -- Need `gcd(gcd(c, |a|) ^ 2, b ^ 2) = 1`. This follows from `gcd(gcd(c, |a|), b) = 1`.
    (Nat.Coprime.pow 2 2 (aux_copri‚ÇÄ hn)) <|
      -- Convert divisibility to ‚Ñï
      by rwa [‚Üê Int.natAbs_pow b 2, ‚Üê Int.natAbs_mul, ‚Üê Int.ofNat_dvd_left]
  -- Since `d` is square-free and `gcd(c, |a|) ^ 2 ‚à£ d`, we must have `gcd(c, |a|) = 1`.
  exact this <| Nat.isUnit_iff.1 <|
    (Int.squarefree_natAbs.2 sqf) (c.gcd a.natAbs) (by rwa [‚Üê sq])

include sqf in
/-- If `4 ‚à£ a ^ 2 - (b ^ 2) d` and `gcd(a, b, 2) = 1`, then `a` and `b` must both be odd. -/
theorem aux_congruent {a b : ‚Ñ§}
  (hdvd : (2 : ‚Ñ§) ^ 2 ‚à£ a ^ 2 - b ^ 2 * d)
  (hn : ‚àÄ (n : ‚Ñ§), n ‚à£ a ‚àß n ‚à£ b ‚àß n ‚à£ (2 : ‚Ñ§) ‚Üí IsUnit n) :
    Odd a ‚àß Odd b := by
  have hc : 2 ‚â† 0 := (Nat.zero_ne_add_one 1).symm
  have odd_a : Odd a :=
    Int.natAbs_odd.1 <| Nat.Coprime.odd_of_left (aux_copri‚ÇÅ sqf hn hdvd)
  -- `a ^ 2 - (b ^ 2) d` is even (divisible by 4)
  have even_ab : Even (a ^ 2 - b ^ 2 * d) :=
    even_iff_two_dvd.mpr <| dvd_trans (dvd_pow_self 2 hc) hdvd
  -- `a ^ 2 - (b ^ 2) d` is even. So Odd - Even = Odd. Thus `(b ^ 2) d` must be odd.
  have odd_b := Odd.sub_even ((Int.odd_pow' hc).2 odd_a) even_ab
  -- Thus `b ^ 2` is odd, hence `b` is odd.
  rw [sub_sub_cancel] at odd_b
  exact ‚ü®odd_a, Int.Odd.of_mul_right <| Int.Odd.of_mul_left odd_b‚ü©

include sqf in
/-- If `4 ‚à£ a ^ 2 - (b ^ 2) d` and `gcd(a, b, 2) = 1`, then `d ‚â° 1 [ZMOD 4]`. -/
theorem congruent {a b : ‚Ñ§}
  (hdvd : (2 : ‚Ñ§) ^ 2 ‚à£ a ^ 2 - b ^ 2 * d)
  (hn : ‚àÄ (n : ‚Ñ§), n ‚à£ a ‚àß n ‚à£ b ‚àß n ‚à£ (2 : ‚Ñ§) ‚Üí IsUnit n) :
    d ‚â° 1 [ZMOD 4] := by
  -- We know `a` and `b` are odd from `aux_congruent`.
  obtain ‚ü®odd_a, odd_b‚ü© := aux_congruent sqf hdvd hn
  -- `a ^ 2 - (b ^ 2) d ‚â° 0 [ZMOD 4]`
  replace hzero : a ^ 2 - b ^ 2 * d ‚â° 0 [ZMOD 4] :=
    Int.ModEq.symm (Dvd.dvd.zero_modEq_int hdvd)
  -- If `a, b` are odd, then `a ^ 2 ‚â° 1 [ZMOD 4]` and `b ^ 2 ‚â° 1 [ZMOD 4]`.
  have mod_b_sq : b ^ 2 ‚â° 1 [ZMOD 4] := Int.sq_mod_four_eq_one_of_odd odd_b
  -- Substitute into the congruence: `a ^ 2 ‚â° d [ZMOD 4]`
  replace hzero := Int.ModEq.add hzero <| Int.ModEq.mul_right d mod_b_sq
  simp only [sub_add_cancel, one_mul, zero_add] at hzero
  -- Since `a ^ 2 ‚â° 1 [ZMOD 4]`, we have `d ‚â° 1 [ZMOD 4]`.
  exact hzero.symm.trans <| Int.sq_mod_four_eq_one_of_odd odd_a

/-- If `x = (a + b‚àöd) / c` (with `gcd = 1`) is an algebraic integer and not rational,
then `c` must divide `2`, and `c ^ 2` must divide `a ^ 2 - (b ^ 2) d`. -/
theorem minpoly_of_int' {x : ‚Ñö‚üÆ‚àö[d]‚üØ} (hx : x ‚àâ (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range)
    (h : x ‚àà (integralClosure ‚Ñ§ ‚Ñö‚üÆ‚àö[d]‚üØ)) :
  (Q.calc_min sqf one hx).2.2 ‚à£ 2 ‚àß
  ((Q.calc_min sqf one hx).2.2 : ‚Ñ§) ^ 2 ‚à£
    (Q.calc_min sqf one hx).1 ^ 2 - (Q.calc_min sqf one hx).2.1 ^ 2 * d := by
  -- Since `x` is integral, `minpoly ‚Ñö x` has integer coefficients.
  rw [minpoly_of_int] at h
  -- Get the representation `a, b, c` and the minimal polynomial.
  obtain ‚ü®hmin, hc, hn‚ü© := Q.calc_min_prop sqf one hx
  -- `hmin` is: `minpoly ‚Ñö x = X ^ 2 - (2 a / c) X + (a ^ 2 - (b ^ 2) d) / (c ^ 2)`
  -- So `Polynomial.map (algebraMap ‚Ñ§ ‚Ñö) (minpoly ‚Ñ§ x)` =
  -- `X ^ 2 - (2 a / c) X + (a ^ 2 - (b ^ 2) d) / (c ^ 2)`
  rw [h] at hmin
  -- Extract coefficients.
  have hmin‚ÇÅ := hmin
  apply_fun (- ¬∑.coeff 1) at hmin‚ÇÅ -- Coefficient of `X`
  simp only [coeff_map, eq_intCast, coeff_add, coeff_sub, coeff_X_pow, OfNat.one_ne_ofNat,
    ‚ÜìreduceIte, coeff_mul_X, coeff_C_zero, zero_sub, coeff_C_succ, add_zero, neg_neg] at hmin‚ÇÅ
  -- `hmin‚ÇÅ` : `-(minpoly ‚Ñ§ x).coeff 1 = 2a / c`
  have hmin‚ÇÄ := hmin
  apply_fun (¬∑.coeff 0) at hmin‚ÇÄ -- Constant coefficient
  simp only [coeff_map, eq_intCast, coeff_add, coeff_sub, coeff_X_pow, OfNat.zero_ne_ofNat,
    ‚ÜìreduceIte, mul_coeff_zero, coeff_C_zero, coeff_X_zero, mul_zero, sub_self,
    zero_add] at hmin‚ÇÄ
  -- `hmin‚ÇÄ` : `(minpoly ‚Ñ§ x).coeff 0` = `(a ^ 2 - (b ^ 2) d) / (c ^ 2)`
  -- Since coeffs of `minpoly ‚Ñ§ x` are integers, use `aux_dvd`.
  replace hmin‚ÇÅ : ((Q.calc_min sqf one hx).2.2 : ‚Ñ§) ‚à£ 2 * (Q.calc_min sqf one hx).1 :=
    aux_dvd (- (minpoly ‚Ñ§ x).coeff 1) hc
    <| by convert hmin‚ÇÅ; simp only [Int.cast_mul, Int.cast_ofNat]
  replace hmin‚ÇÄ : ((Q.calc_min sqf one hx).2.2 ^ 2 : ‚Ñ§) ‚à£ ((Q.calc_min sqf one hx).1 ^ 2 -
      (Q.calc_min sqf one hx).2.1 ^ 2 * d) := aux_dvd ((minpoly ‚Ñ§ x).coeff 0)
    (pow_ne_zero 2 hc) <| by simpa only [Int.cast_sub, Int.cast_pow, Int.cast_mul,
      one_mul, Nat.cast_mul, ‚Üê sq]
  -- Since `gcd(c, a) = 1` (from `aux_copri‚ÇÅ`), and `c ‚à£ 2a`, we must have `c ‚à£ 2`.
  exact ‚ü®Int.ofNat_dvd.1 <| Int.dvd_of_dvd_mul_left_of_gcd_one hmin‚ÇÅ
    (aux_copri‚ÇÅ sqf hn.1 hmin‚ÇÄ), hmin‚ÇÄ‚ü©

/-- Integers are in the ‚Ñ§-algebra generated by any element `c`. -/
private theorem adjoin_mem‚ÇÄ {a : ‚Ñ§} {c : ‚ÑÇ} : (a : ‚ÑÇ) ‚àà Algebra.adjoin ‚Ñ§ {c} :=
  bot_le (a := Algebra.adjoin ‚Ñ§ {c}) <| Subalgebra.intCast_mem ‚ä• a

/-- If `x ‚àà ‚Ñö` is an algebraic integer, then `x ‚àà ‚Ñ§`.
So `x` (as a complex number) is in `Algebra.adjoin ‚Ñ§ {c}` for any `c`. -/
theorem adjoin_mem‚ÇÅ {x : ‚Ñö‚üÆ‚àö[d]‚üØ} {c : ‚ÑÇ} (hx : x ‚àà (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range)
    (h : x ‚àà (integralClosure ‚Ñ§ ‚Ñö‚üÆ‚àö[d]‚üØ)) : x.1 ‚àà Algebra.adjoin ‚Ñ§ {c} := by
  rw [minpoly_of_int] at h -- `minpoly ‚Ñö x` has ‚Ñ§ coeffs
  -- If `x` is rational, its minimal polynomial has degree 1.
  have minpoly_deg := minpoly.natDegree_eq_one_iff.2 hx
  rw [h, natDegree_map_eq_of_injective, minpoly.natDegree_eq_one_iff] at minpoly_deg
  swap; ¬∑ exact RingHom.injective_int (algebraMap ‚Ñ§ ‚Ñö)
  obtain ‚ü®x', hx'‚ü© := minpoly_deg
  rw [‚Üê hx', algebraMap_int_eq, eq_intCast, SubringClass.coe_intCast]
  exact Subsemiring.subset_closure (Set.subset_union_left (Set.mem_range_self x'))

/-- Rationals are in the ‚Ñö-algebra generated by any element `c`. -/
theorem adjoin_mem‚ÇÇ {a : ‚Ñö} {c : ‚ÑÇ} : (a : ‚ÑÇ) ‚àà ‚Ñö‚üÆc‚üØ := by
  -- ‚Ñö is the bottom subalgebra over ‚Ñö
  suffices (a : ‚ÑÇ) ‚àà (‚ä• : Subalgebra ‚Ñö ‚ÑÇ) from (bot_le (a := ‚Ñö‚üÆc‚üØ)) this
  apply SetLike.mem_of_subset
  ¬∑ simp only [Algebra.coe_bot]; rfl -- The bottom subalgebra is the image of ‚Ñö
  ¬∑ simp only [Set.mem_range, eq_ratCast, Rat.cast_inj, exists_eq] -- `a` is in the image of ‚Ñö

/-- If `x = a + b‚àöd` (i.e., `c = 1`) is an integer, then `x ‚àà ‚Ñ§[‚àöd]`. -/
theorem adjoin_mem‚ÇÉ {x : ‚Ñö‚üÆ‚àö[d]‚üØ} (hx : x ‚àâ (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range)
    (hone : (Q.calc_min sqf one hx).2.2 = 1) : x.1 ‚àà Algebra.adjoin ‚Ñ§ {‚àö[d]} := by
  -- Get the representation and minimal polynomial
  obtain ‚ü®hmin, -, -‚ü© := Q.calc_min_prop sqf one hx
  -- Map the minimal polynomial equation to ‚ÑÇ
  apply_fun (Polynomial.map (algebraMap ‚Ñö ‚ÑÇ) ¬∑ ) at hmin
  -- Factor the polynomial over ‚ÑÇ
  rw [minpoly_break] at hmin
  -- Evaluate at `x`
  apply_fun (aeval (x : ‚ÑÇ) ¬∑ ) at hmin
  -- `x` is a root, simplify using `c = 1`
  simp only [aeval_map_algebraMap, Subalgebra.aeval_coe, minpoly.aeval, ZeroMemClass.coe_zero,
    Rat.cast_intCast, one_div, hone, Nat.cast_one, Rat.cast_one, div_one, map_add, map_intCast,
    map_mul, map_sub, coe_aeval_eq_eval, eval_X, eval_C, zero_eq_mul] at hmin
  -- `x = a + b‚àöd` or `x = a - b‚àöd` (where `a, b` are from `calc_min`)
  rcases hmin with hx‚ÇÅ | hx‚ÇÅ <;> rw [sub_eq_zero.1 hx‚ÇÅ]
  ¬∑ -- Case `x = a + b‚àöd`
    refine add_mem adjoin_mem‚ÇÄ <| mul_mem adjoin_mem‚ÇÄ ?_ -- `a ‚àà ‚Ñ§[‚àöd], b ‚àà ‚Ñ§[‚àöd]`
    simpa only [one_div] using Algebra.self_mem_adjoin_singleton ‚Ñ§ ‚àö[d] -- `‚àöd ‚àà ‚Ñ§[‚àöd]`
  ¬∑ -- Case `x = a - b‚àöd`
    refine sub_mem adjoin_mem‚ÇÄ <| mul_mem adjoin_mem‚ÇÄ ?_
    simpa only [one_div] using Algebra.self_mem_adjoin_singleton ‚Ñ§ ‚àö[d]

end aux

namespace Z‚ÇÅ -- Case 1: `d ‚â° 2 or 3 (mod 4)`, i.e., `¬¨(d ‚â° 1 [ZMOD 4])`

-- Polynomial `X  ^ 2 - d` over ‚Ñ§
local notation "polyz" => X ^ 2 - C d

/-- Degree of `X  ^ 2 - d` over ‚Ñ§ is 2. -/
private theorem polyz_natDegree : natDegree polyz = 2 := natDegree_X_pow_sub_C
/-- `X  ^ 2 - d` is monic over ‚Ñ§. -/
private theorem polyz_Monic : Monic polyz := by monicity!

/-- `‚àöd` is integral over ‚Ñ§, witnessed by `polyz`. -/
theorem integralz : IsIntegral ‚Ñ§ ‚àö[d] := by
  refine ‚ü®polyz, ‚ü®polyz_Monic, ?_‚ü©‚ü©
  ¬∑ simp only [algebraMap_int_eq, one_div, eq_intCast, eval‚ÇÇ_sub, eval‚ÇÇ_X_pow,
    Complex.cpow_ofNat_inv_pow] -- Evaluate `polyz` at `‚àöd`
    -- Need `‚àöd ^ 2 - d = 0`
    change d - eval‚ÇÇ (Int.castRingHom ‚ÑÇ) ((d : ‚ÑÇ) ^ (2‚Åª¬π : ‚ÑÇ)) (C d) = 0
    rw [eval‚ÇÇ_C, eq_intCast, sub_self]

-- Power basis `{1, ‚àöd}` for `‚Ñ§[‚àöd]` over ‚Ñ§
local notation3 "zbase" => Algebra.adjoin.powerBasis' (@integralz d)

/-- The degree of the minimal polynomial of `‚àöd` over `‚Ñ§` is at most 2. -/
private theorem min_polyz_natDegree_le : (minpoly ‚Ñ§ ‚àö[d]).natDegree ‚â§ 2 := by
  rw [‚Üê @polyz_natDegree d] -- Use `polyz` degree
  -- minpoly divides `polyz`
  refine natDegree_le_of_dvd ?_ (X_pow_sub_C_ne_zero (Nat.zero_lt_two) d)
  refine minpoly.isIntegrallyClosed_dvd integralz ?_ -- Check `‚àöd` is root of `polyz`
  simp only [one_div, eq_intCast, map_sub, map_pow, aeval_X, Complex.cpow_ofNat_inv_pow,
    map_intCast, sub_self]

/-- The generator `‚àöd` as an element of the ‚Ñ§-algebra `‚Ñ§[‚àöd]`. -/
noncomputable abbrev Œ¥ : Algebra.adjoin ‚Ñ§ {‚àö[d]} :=
  ‚ü®‚àö[d], SetLike.mem_coe.1 <| Algebra.subset_adjoin <| Set.mem_singleton ‚àö[d]‚ü©

/-- `Œ¥ ^ 2 = d` in the ring `‚Ñ§[‚àöd]`. -/
private theorem sqd_sq : (@Œ¥ d) ^ 2 = d := by
  apply SetLike.coe_eq_coe.1 -- Work with underlying complex numbers
  change ‚àö[d] ^ 2 = d
  simp only [one_div, Complex.cpow_ofNat_inv_pow]

include sqf one

/-- The polynomial `X  ^ 2 - d` is irreducible over `‚Ñ§`. -/
private theorem irr_polyz : Irreducible polyz := by
  -- Use Gauss's lemma: irreducible over ‚Ñ§ iff irreducible over ‚Ñö
  refine (Monic.irreducible_iff_irreducible_map_fraction_map
    (@polyz_Monic d) (K := ‚Ñö)).2 ?_
  -- Need irreducibility of `X  ^ 2 - d` over ‚Ñö
  convert Q.poly_irr sqf one
  simp only [algebraMap_int_eq, eq_intCast, Polynomial.map_sub, Polynomial.map_pow, map_X,
    Polynomial.map_intCast, map_intCast] -- Check map `‚Ñ§ ‚Üí ‚Ñö` gives the right polynomial

/-- The degree of the minimal polynomial of `‚àöd` over `‚Ñ§` is exactly 2. -/
private theorem min_polyz_natDegree : (minpoly ‚Ñ§ ‚àö[d]).natDegree = 2 := by
  refine le_antisymm min_polyz_natDegree_le ?_ -- We know ‚â§ 2, need ‚â• 2
  -- Degree is ‚â• 2 iff the element is not in the base ring (‚Ñ§).
  -- We map to ‚ÑÇ and check it's not rational.
  rw [minpoly.two_le_natDegree_iff (@integralz d)]
  rintro ‚ü®x, hx : (algebraMap ‚Ñö ‚ÑÇ) x = ‚àö[d]‚ü© -- Assume `‚àöd` is rational
  have := Q.sqrt_d_not_mem sqf one -- We know `‚àöd` is not rational
  rw [‚Üê hx] at this
  exact this <| RingHom.mem_range_self (algebraMap ‚Ñö ‚ÑÇ) x -- Contradiction

/-- The dimension of the power basis `zbase` (for `‚Ñ§[‚àöd]` over ‚Ñ§) is 2. -/
private theorem base_dim : 2 = dim zbase := by
  rw [Algebra.adjoin.powerBasis'_dim, min_polyz_natDegree sqf one] -- Dim = degree of minpoly

/-- The second element of the power basis `zbase` is the generator `Œ¥ = ‚àöd`. -/
private theorem base_equiv_one : adj (base_dim sqf one) = Œ¥ := by
  have : (finCongr (base_dim sqf one) 1) =
    ‚ü®1, by rw [‚Üê base_dim sqf one]; omega‚ü© := rfl -- Index 1 is valid
  rw [adj, this, basis_eq_pow zbase _] -- Def of adj and basis element
  simp only [pow_one] -- `gen ^ 1 = gen`
  exact Algebra.adjoin.powerBasis'_gen integralz -- Generator of basis is the element itself

/-- Any element `Œ±` in `‚Ñ§[‚àöd]` can be written as `r + s * ‚àöd` with `r, s ‚àà ‚Ñ§`. -/
private theorem int_linear_comb (Œ± : Algebra.adjoin ‚Ñ§ {‚àö[d]}) :
    ‚àÉ r s : ‚Ñ§, Œ± = r + s * (@Œ¥ d) := by
  -- Apply general quadratic representation over ‚Ñ§
  have := quadratic.repr (base_dim sqf one) Œ±
  -- Substitute the generator
  rw [base_equiv_one sqf one] at this
  -- Simplify AlgebraMap and smul
  simp only [algebraMap_int_eq, eq_intCast, SetLike.mk_smul_mk, one_div, zsmul_eq_mul] at this
  convert this
  simp only [MulMemClass.coe_mul, SubringClass.coe_intCast, one_div]

/-- Elements of `‚Ñ§[‚àöd]` (viewed as complex numbers) are contained in `‚Ñö(‚àöd)`. -/
private theorem adjoin_mem‚ÇÑ (Œ± : Algebra.adjoin ‚Ñ§ {‚àö[d]}) : Œ±.1 ‚àà ‚Ñö‚üÆ‚àö[d]‚üØ := by
  obtain ‚ü®r, s, hrs‚ü© := int_linear_comb sqf one Œ± -- Get `r, s ‚àà ‚Ñ§` representation
  rw [hrs] -- Substitute
  -- Map to ‚ÑÇ
  simp only [one_div, AddMemClass.coe_add, SubringClass.coe_intCast, MulMemClass.coe_mul]
  -- `r + s‚àöd ‚àà ‚Ñö(‚àöd)` since `r, s ‚àà ‚Ñ§ ‚äÇ ‚Ñö ` and `‚àöd ‚àà ‚Ñö(‚àöd)`
  exact add_mem adjoin_mem‚ÇÇ <| mul_mem adjoin_mem‚ÇÇ <| mem_adjoin_simple_self ‚Ñö _

/-- Elements of `‚Ñ§[‚àöd]` are algebraic integers in `‚Ñö(‚àöd)`. -/
private theorem adjoin_of_ring_of_int (x : ‚Ñö‚üÆ‚àö[d]‚üØ) (h : x.1 ‚àà Algebra.adjoin ‚Ñ§ {‚àö[d]}) :
    x ‚àà (integralClosure ‚Ñ§ ‚Ñö‚üÆ‚àö[d]‚üØ) := by
  -- Represent `x` as `r + sŒ¥` with `r, s ‚àà ‚Ñ§`
  obtain ‚ü®r, s, hrs‚ü© := int_linear_comb sqf one ‚ü®x, h‚ü©
  have : x = r + s * (AdjoinSimple.gen ‚Ñö ‚àö[d]) :=
    Subtype.val_inj.1 <| by apply Subtype.val_inj.2 hrs -- Match types
  rw [this]
  -- Integers `r, s` are integral. `Œ¥ = ‚àöd` is integral (`integralz`).
  -- The integral closure is a ring, so `r + sŒ¥` is integral.
  refine add_mem isIntegral_algebraMap <| mul_mem isIntegral_algebraMap ?_
  rw [mem_integralClosure_iff, ‚Üê isIntegral_algebraMap_iff (@algMap_inj d),
    AdjoinSimple.algebraMap_gen ‚Ñö ‚àö[d]] -- Check if `AdjoinSimple.gen` is integral
  exact integralz -- Yes, `‚àöd` is integral over ‚Ñ§

/-- `‚Ñ§[‚àöd]` is a free ‚Ñ§-module of rank 2. -/
instance : Module.Free ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]}) := ‚ü®‚ü®Fin (dim zbase), basis zbase‚ü©‚ü©

-- Calculate entries of the trace matrix for the basis `{1, ‚àöd}`
/-- `Trace(1 * 1) = Trace(1) = 2`. -/
private theorem traceForm_11 :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]}) 1 1 = 2 := by
  rw [Algebra.traceForm_apply, one_mul, -- Def of trace form
    ‚Üê @algebraMap.coe_one ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]}) .., -- `1 = algebraMap 1`
    Algebra.trace_algebraMap, finrank zbase, -- `Trace(algebraMap r) = dim * r`
    ‚Üê base_dim sqf one, nsmul_eq_mul, Nat.cast_ofNat, mul_one] -- `dim = 2`

/-- `Trace(1 * Œ¥) = Trace(Œ¥) = 0`. -/
private theorem traceForm_1Œ¥ :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]}) 1 Œ¥ = 0 := by
  rw [Algebra.traceForm_apply, one_mul, Algebra.trace_eq_matrix_trace (basis zbase)
    Œ¥, Matrix.trace, finChange (base_dim sqf one)] -- Use matrix trace definition
  -- Sum diagonal entries
  simp only [Equiv.toFun_as_coe, Matrix.diag_apply, Fin.sum_univ_two, Fin.isValue]
  -- Suppose matrix of left multiplication by `Œ¥` in basis `{1, Œ¥}` is `M`
  -- Need `M‚ÇÄ‚ÇÄ` and `M‚ÇÅ‚ÇÅ`
  rw [Algebra.leftMulMatrix_eq_repr_mul, Algebra.leftMulMatrix_eq_repr_mul,
    base_equiv_zero (base_dim sqf one), mul_one]
  have neq : finCongr (base_dim sqf one) 0 ‚â†
    finCongr (base_dim sqf one) 1 := ne_of_beq_false rfl
  -- Calculate `M‚ÇÄ‚ÇÄ = (repr Œ¥)‚ÇÄ`
  have := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one) 1) -- Basis element `Œ¥`
    (finCongr (base_dim sqf one) 0) -- Index 0
  rw [ite_cond_eq_false _ _ (eq_false neq.symm)] at this -- `(repr Œ¥)‚ÇÄ = 0`
  rw [‚Üê base_equiv_one sqf one, adj, this, zero_add] -- `M‚ÇÄ‚ÇÄ = 0`
  -- Calculate `M‚ÇÅ‚ÇÅ = (repr (Œ¥ * Œ¥))‚ÇÅ`
  rw [‚Üê adj, base_equiv_one sqf one, ‚Üê sq, sqd_sq] -- `Œ¥ * Œ¥ = d`
  -- Need `(repr d)‚ÇÅ`. Since `d = d * 1 + 0 * Œ¥`, `(repr d)‚ÇÅ = 0`.
  have cast : @Int.cast (Algebra.adjoin ‚Ñ§ {‚àö[d]}) AddGroupWithOne.toIntCast d =
    ((algebraMap ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]})) d) * 1 := by -- `d = d * 1`
      rw [algebraMap_int_eq, eq_intCast, mul_one]
  replace this := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one) 0) -- Basis element 1
    (finCongr (base_dim sqf one) 1) -- Index 1
  rw [ite_cond_eq_false _ _ (eq_false neq)] at this -- `(repr 1)‚ÇÅ = 0`
  -- `(repr d)‚ÇÅ = d * (repr 1)‚ÇÅ = 0`
  rw [cast, Module.Basis.repr_smul', ‚Üê base_equiv_zero (base_dim sqf one), this, mul_zero]
  -- Trace = `M‚ÇÄ‚ÇÄ + M‚ÇÅ‚ÇÅ = 0 + 0 = 0`

/-- `Trace(Œ¥ * 1) = Trace(Œ¥) = 0`. -/
private theorem traceForm_Œ¥1 :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]}) Œ¥ 1 = 0 := by
  -- via symmetric
  simpa only [Algebra.traceForm_apply, mul_one, one_mul] using traceForm_1Œ¥ sqf one

/-- `Trace(Œ¥ * Œ¥) = Trace(d) = 2d`. -/
private theorem traceForm_Œ¥Œ¥ :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]}) Œ¥ Œ¥ = 2 * d := by
  rw [Algebra.traceForm_apply, ‚Üê sq, sqd_sq,
    Algebra.trace_eq_matrix_trace (basis zbase) d,
    Matrix.trace, finChange (base_dim sqf one)]
  -- Sum diagonal
  simp only [Equiv.toFun_as_coe, Matrix.diag_apply, Fin.sum_univ_two, Fin.isValue]
  -- Suppose matrix of left multiplication by `d` is `M`
  -- Need `M‚ÇÄ‚ÇÄ` and `M‚ÇÅ‚ÇÅ`
  rw [Algebra.leftMulMatrix_eq_repr_mul, Algebra.leftMulMatrix_eq_repr_mul,
    base_equiv_zero (base_dim sqf one), mul_one]
  -- Calculate `M‚ÇÄ‚ÇÄ = (repr d)‚ÇÄ`
  have := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one) 0) -- Basis element 1
    (finCongr (base_dim sqf one) 0) -- Index 0
  -- `(repr 1)‚ÇÄ = 1`
  rw [ite_cond_eq_true _ _ (eq_self (finCongr (base_dim sqf one) 0))] at this
  have cast : @Int.cast (Algebra.adjoin ‚Ñ§ {‚àö[d]}) AddGroupWithOne.toIntCast d =
    ((algebraMap ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]})) d) * 1 := by -- `d = d * 1`
      rw [algebraMap_int_eq, eq_intCast, mul_one]
  nth_rw 1 [cast]
  -- `(repr d)‚ÇÄ = d * (repr 1)‚ÇÄ = d`
  rw [Module.Basis.repr_smul', ‚Üê base_equiv_zero (base_dim sqf one), this, mul_one]
  -- Calculate `M‚ÇÅ‚ÇÅ = (repr (d * Œ¥))‚ÇÅ`
  replace cast : @Int.cast (Algebra.adjoin ‚Ñ§ {‚àö[d]}) AddGroupWithOne.toIntCast d =
    ((algebraMap ‚Ñ§ (Algebra.adjoin ‚Ñ§ {‚àö[d]})) d) := by -- Cast `d`
      rw [algebraMap_int_eq, eq_intCast]
  replace this := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one) 1) -- Basis element `Œ¥`
    (finCongr (base_dim sqf one) 1) -- Index 1
  -- `(repr Œ¥)‚ÇÅ = 1`
  rw [ite_cond_eq_true _ _ (eq_self (finCongr (base_dim sqf one) 1))] at this
  -- `(repr (d * Œ¥))‚ÇÅ = d * (repr Œ¥)‚ÇÅ = d`
  -- Trace = `M‚ÇÄ‚ÇÄ + M‚ÇÅ‚ÇÅ = d + d = 2d`
  rw [cast, Module.Basis.repr_smul', this, mul_one, Int.two_mul d]

/-- The trace matrix for the basis `{1, Œ¥}` is `[[2, 0], [0, 2d]]`. -/
private def traceMat : Matrix (Fin 2) (Fin 2) ‚Ñ§ := !![2, 0; 0, 2 * d]

/-- The trace matrix calculated using `Algebra.traceMatrix` matches `traceMat`. -/
private theorem mat_conv :
  (Matrix.reindexAlgEquiv ‚Ñ§ ‚Ñ§ (finCongr (base_dim sqf one)).symm)
    (Algebra.traceMatrix ‚Ñ§ (basis zbase)) = @traceMat d := Matrix.ext fun i j ‚Ü¶ by
  fin_cases i <;> fin_cases j -- Check all 4 entries
  all_goals simp only [Fin.zero_eta, Fin.isValue, Fin.mk_one,
    Matrix.reindexAlgEquiv_apply, Matrix.reindex_apply, Equiv.symm_symm, Matrix.submatrix_apply]
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, base_equiv_zero (base_dim sqf one)]
    exact traceForm_11 sqf one
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, base_equiv_zero (base_dim sqf one), ‚Üê adj,
      base_equiv_one sqf one]
    exact traceForm_1Œ¥ sqf one
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, base_equiv_zero (base_dim sqf one), ‚Üê adj,
      base_equiv_one sqf one]
    exact traceForm_Œ¥1 sqf one
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, ‚Üê adj, base_equiv_one sqf one]
    exact traceForm_Œ¥Œ¥ sqf one

/-- The discriminant of the ‚Ñ§-basis `{1, ‚àöd}` is `det(traceMatrix) = 4d`. -/
private theorem discr_z : Algebra.discr ‚Ñ§ (basis zbase) = 4 * d := by
  have := Matrix.det_reindexAlgEquiv ‚Ñ§ ‚Ñ§ (finCongr (base_dim sqf one)).symm
    (Algebra.traceMatrix ‚Ñ§ (basis zbase)) -- Det is invariant under reindexing
  rw [Algebra.discr_def, ‚Üê this, mat_conv sqf one, traceMat, Matrix.det_fin_two_of,
    mul_zero, sub_zero, ‚Üê mul_assoc]; rfl -- Calculate `det([[2, 0], [0, 2d]])`

-- We are in the case `¬¨ (d ‚â° 1 [ZMOD 4])`
variable (hd : ¬¨ d ‚â° 1 [ZMOD 4])

include hd

/-- The ring of integers of `‚Ñö(‚àöd)` is `‚Ñ§[‚àöd]` when `¬¨ (d ‚â° 1 [ZMOD 4])`. -/
theorem ring_of_int (x : ‚Ñö‚üÆ‚àö[d]‚üØ) : x ‚àà (integralClosure ‚Ñ§ ‚Ñö‚üÆ‚àö[d]‚üØ) ‚Üî
  x.1 ‚àà Algebra.adjoin ‚Ñ§ {‚àö[d]} := by
  constructor
  ¬∑ intro h -- Assume `x` is an integer
    by_cases hx : x ‚àà (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range -- Case 1: `x` is rational
    ¬∑ exact adjoin_mem‚ÇÅ hx h -- Rational integer is in ‚Ñ§, hence in ‚Ñ§[‚àöd]
    ¬∑ -- Case 2: `x` is not rational. Use `x = (a + b‚àöd) / c` representation.
      -- `c ‚à£ 2` and `c ^ 2 ‚à£ a ^ 2 - (b ^ 2) d`
      obtain ‚ü®c_div, hmin‚ÇÄ‚ü© := minpoly_of_int' sqf one hx h
      obtain ‚ü®-, hc, hn‚ü© := Q.calc_min_prop sqf one hx -- Get `a, b, c` properties
      have c_le := Nat.le_of_dvd Nat.zero_lt_two c_div -- `c ‚à£ 2` means `c = 1` or `c = 2`
      set c := (Q.calc_min sqf one hx).2.2
      match hmatch : c with
      | 0 => exact False.elim (hc rfl) -- `c ‚â† 0`
      | 1 => exact adjoin_mem‚ÇÉ sqf one hx hmatch -- If `c = 1, x = a + b‚àöd ‚àà ‚Ñ§[‚àöd]`
      | 2 => -- If `c = 2`, we have `4 | a ^ 2 - (b ^ 2) d` and `gcd(a, b, 2) = 1`.
             -- This implies `d ‚â° 1 [ZMOD 4]` by `congruent`.
        -- Contradicts assumption `¬¨(d ‚â° 1 [ZMOD 4])`
        exact False.elim <| hd <| congruent sqf hmin‚ÇÄ hn.1
  ¬∑ exact adjoin_of_ring_of_int sqf one x -- Converse: elements of `‚Ñ§[‚àöd]` are integers

/-- The ring of integers `ùìû ‚Ñö(‚àöd)` is ‚Ñ§-algebra isomorphic to `‚Ñ§[‚àöd]`
when `¬¨ (d ‚â° 1 [ZMOD 4])`. -/
noncomputable def ring_of_int' : ùìû ‚Ñö‚üÆ‚àö[d]‚üØ ‚âÉ‚Çê[‚Ñ§] Algebra.adjoin ‚Ñ§ {‚àö[d]} where
  toFun x := ‚ü®x, (ring_of_int sqf one hd x).1 x.2‚ü© -- Map integer `x` to itself in ‚Ñ§[‚àöd]
  invFun y := ‚ü®‚ü®y.1, adjoin_mem‚ÇÑ sqf one y‚ü©, -- Map `y ‚àà ‚Ñ§[‚àöd]` to `‚ü®y.1, _‚ü©` in `ùìû ‚Ñö(‚àöd)`
    (ring_of_int sqf one hd ‚ü®y.1, adjoin_mem‚ÇÑ sqf one y‚ü©).2 y.2‚ü© -- Proof it's an integer
  left_inv _ := rfl
  right_inv _ := rfl
  map_mul' _ _ := rfl
  map_add' _ _ := rfl
  commutes' _ := rfl

/-- An integral basis for `ùìû ‚Ñö(‚àöd)` obtained by mapping the basis `{1, ‚àöd}` of `‚Ñ§[‚àöd]`. -/
noncomputable abbrev intbase :=
  PowerBasis.map zbase (ring_of_int' sqf one hd).symm

/-- The discriminant of `‚Ñö(‚àöd)` is `4d` when `¬¨ (d ‚â° 1 [ZMOD 4])`. -/
theorem final : NumberField.discr ‚Ñö‚üÆ‚àö[d]‚üØ = 4 * d := by
  -- Discriminant is invariant under isomorphism, use the basis for ‚Ñ§[‚àöd].
  -- Use basis mapped from `zbase`
  rw [‚Üê discr_eq_discr ‚Ñö‚üÆ‚àö[d]‚üØ (intbase sqf one hd).basis, intbase]
  simp only [map_dim, map_basis] -- Properties of `PowerBasis.map`
  have : (basis zbase).map (ring_of_int' sqf one hd).symm.toLinearEquiv =
    (ring_of_int' sqf one hd).symm ‚àò (basis zbase) := by
    funext x
    simp only [Algebra.adjoin.powerBasis'_dim, Module.Basis.map_apply, AlgEquiv.toLinearEquiv_apply,
      Function.comp_apply]
  -- Discr invariant under `AlgEquiv`
  rw [this, ‚Üê Algebra.discr_eq_discr_of_algEquiv (basis zbase) (ring_of_int' sqf one hd).symm]
  exact discr_z sqf one -- Use the calculated discriminant for `zbase`

end Z‚ÇÅ

namespace Z‚ÇÇ -- Case 2: `d ‚â° 1 [ZMOD 4]`

variable (hd : d ‚â° 1 [ZMOD 4])

variable (d) in
/-- Define `k = (d - 1) / 4`, which is an integer since `d ‚â° 1 [ZMOD 4]`. -/
noncomputable def k : ‚Ñ§ := (d - 1) / 4

variable (d) in
/-- The polynomial `X ^ 2 - X - k` over ‚Ñ§. -/
noncomputable abbrev polyz : ‚Ñ§[X] := X ^ 2 - C 1 * X - C (k d)

/-- Degree of `polyz` is 2. -/
theorem polyz_natDegree : (polyz d).natDegree = 2 := by
  unfold polyz; compute_degree!

/-- `polyz` is monic. -/
theorem polyz_Monic : (polyz d).Monic := by
  unfold polyz; monicity!

-- The generator for this case
local notation "Œ≥" => (1 + ‚àö[d]) / 2

include hd in
/-- Property defining `k`: `4k = d - 1`. -/
theorem hk : 4 * (k d) = d - 1 := by
  have := Int.ModEq.sub hd (show 1 ‚â° 1 [ZMOD 4] by rfl)
  rw [sub_self, Int.modEq_zero_iff_dvd] at this
  exact Int.mul_ediv_cancel_of_dvd this

include hd in
/-- `Œ≥` is a root of `polyz`. -/
theorem eval_zero : eval‚ÇÇ (algebraMap ‚Ñ§ ‚ÑÇ) Œ≥ (polyz d) = 0 := by
  simp only [algebraMap_int_eq, eq_intCast, Int.cast_one, one_mul, eval‚ÇÇ_sub, eval‚ÇÇ_X_pow,
    eval‚ÇÇ_X] -- Evaluate `polyz` at `Œ≥`
  conv =>
    enter [1, 2]
    change eval‚ÇÇ (algebraMap ‚Ñ§ ‚ÑÇ) Œ≥ (C (k d)) -- Target constant term eval
    rw [eval‚ÇÇ_C, algebraMap_int_eq, eq_intCast] -- Evaluate `C k`
  ring_nf -- Simplify `Œ≥ ^ 2 - Œ≥ - k`
  simp only [one_div, Complex.cpow_ofNat_inv_pow] -- `‚àöd ^ 2 = d`
  have : (-1 / 4 + ((d : ‚ÑÇ) * 4‚Åª¬π - (k d))) * 4 = 0 := by -- Calculation check in ‚ÑÇ
    rw [add_mul, div_mul, div_self (OfNat.zero_ne_ofNat 4).symm, div_one,
      sub_mul, mul_assoc] -- Distribute (¬∑ * 4)
    simp only [isUnit_iff_ne_zero, ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true,
      IsUnit.inv_mul_cancel, mul_one] -- Simplify 4 * 1 / 4 = 1
    norm_cast -- Cast to ‚Ñ§
    rw [mul_comm _ 4, hk hd, sub_sub_cancel]; rfl -- Use `4k = d - 1`
  exact (mul_eq_zero_iff_right (OfNat.zero_ne_ofNat 4).symm).1 this -- Result is zero

/-- The element `‚àöd` is contained in `‚Ñ§[Œ≥]`. Specifically, `‚àöd = 2Œ≥ - 1`. -/
private theorem adjoin_mem‚ÇÑ : (AdjoinSimple.gen ‚Ñö (‚àö[d])).1 ‚àà Algebra.adjoin ‚Ñ§ {Œ≥} := by
  suffices (AdjoinSimple.gen ‚Ñö (‚àö[d])).1 = 2 * Œ≥ - 1 from by -- Check relation
    rw [this]
    -- `2Œ≥ - 1 ‚àà ‚Ñ§[Œ≥]` because `2 ‚àà ‚Ñ§, Œ≥ ‚àà ‚Ñ§[Œ≥], 1 ‚àà ‚Ñ§`.
    refine sub_mem (mul_mem adjoin_mem‚ÇÄ <| Algebra.self_mem_adjoin_singleton ‚Ñ§ _) ?_
    convert @adjoin_mem‚ÇÄ 1 Œ≥ -- Check `1 ‚àà ‚Ñ§[Œ≥]`
    exact Int.cast_one.symm
  -- Verify `‚àöd = 2 * (1 + ‚àöd) / 2 - 1`
  rw [AdjoinSimple.coe_gen, one_div, mul_div_cancel‚ÇÄ _ (NeZero.ne' 2).symm,
    add_sub_cancel_left]

/-- If `a, b` are odd, then `(a + b‚àöd) / 2` is in `‚Ñ§[Œ≥]`. -/
private theorem adjoin_mem‚ÇÖ {a b : ‚Ñ§} (hodd : Odd a ‚àß Odd b) :
    (a + b * (AdjoinSimple.gen ‚Ñö (‚àö[d])).1) / 2 ‚àà Algebra.adjoin ‚Ñ§ {Œ≥} := by
  -- Write `a = 2k‚ÇÅ + 1, b = 2k‚ÇÇ + 1`
  obtain ‚ü®‚ü®k‚ÇÅ, ka‚ü©, ‚ü®k‚ÇÇ, kb‚ü©‚ü© := hodd
  rw [ka, kb] -- Substitute
  conv =>
    enter [2] -- Target the expression
    simp only [Int.cast_add, Int.cast_mul, Int.cast_ofNat, Int.cast_one, AdjoinSimple.coe_gen,
      add_div]
    rw [‚Üê mul_div, mul_div_cancel‚ÇÄ _ (NeZero.ne' 2).symm, add_mul, add_div, one_mul,
      mul_assoc, ‚Üê mul_div, mul_div_cancel‚ÇÄ _ (NeZero.ne' 2).symm, ‚Üê add_assoc, add_comm,
      ‚Üê add_assoc, ‚Üê add_assoc, add_comm _ (1 / 2), ‚Üê add_assoc, ‚Üê add_div]
    -- This leads to `(k‚ÇÅ - k‚ÇÇ) + (2k‚ÇÇ + 1) * Œ≥`, which is in `‚Ñ§[Œ≥]`
  exact add_mem (add_mem (Algebra.self_mem_adjoin_singleton ‚Ñ§ _) adjoin_mem‚ÇÄ)
    <| mul_mem adjoin_mem‚ÇÄ adjoin_mem‚ÇÑ -- Check membership using closure properties

variable (d) in
/-- `polyz` mapped to ‚Ñö[X]. -/
noncomputable abbrev polyq := Polynomial.map (algebraMap ‚Ñ§ ‚Ñö) (polyz d)

/-- Degree of `polyq` is 2. -/
private theorem polyq_natDegree : (polyq d).natDegree = 2 := by
  unfold polyq
  simp only [algebraMap_int_eq, Polynomial.map_sub, eq_intCast, Int.cast_one, one_mul,
    Polynomial.map_pow, map_X, Polynomial.map_intCast] -- Map coefficients
  compute_degree!

include hd

/-- `Œ≥` is integral over ‚Ñ§, witnessed by `polyz`. -/
theorem integralz : IsIntegral ‚Ñ§ Œ≥ := ‚ü®polyz d, ‚ü®polyz_Monic, eval_zero hd‚ü©‚ü©

-- Power basis `{1, Œ≥}` for ‚Ñ§[Œ≥] over ‚Ñ§
local notation3 "zbase" => Algebra.adjoin.powerBasis' (integralz hd)

/-- `‚Ñ§[Œ≥]` is a free ‚Ñ§-module. -/
theorem free_mod : Module.Free ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥}) := ‚ü®‚ü®Fin (dim zbase), basis zbase‚ü©‚ü©

/-- The degree of the minimal polynomial of `Œ≥` over `‚Ñ§` is at most 2. -/
private theorem min_polyz_natDegree_le : (minpoly ‚Ñ§ Œ≥).natDegree ‚â§ 2 := by
  rw [‚Üê polyz_natDegree] -- Use `polyz` degree
  exact natDegree_le_of_dvd -- minpoly divides `polyz`
    -- `Œ≥` is root of `polyz`
    (minpoly.isIntegrallyClosed_dvd (integralz hd) <| eval_zero hd)
      -- `polyz` is non-zero
      <| Monic.ne_zero_of_ne Int.zero_ne_one <| polyz_Monic

/-- The generator `Œ≥` as an element of the ‚Ñ§-algebra `‚Ñ§[Œ≥]`. -/
noncomputable abbrev Œ¥ : Algebra.adjoin ‚Ñ§ {Œ≥} :=
  ‚ü®Œ≥, SetLike.mem_coe.1 <| Algebra.subset_adjoin <| Set.mem_singleton Œ≥‚ü©

/-- Relation satisfied by `Œ¥ = Œ≥`: `Œ¥ ^ 2 = k + Œ¥`. -/
private theorem break_sq :
    ((@Œ¥ d) ^ 2) = (k d) * 1 + 1 * (@Œ¥ d) := by
  apply Subtype.val_inj.1 -- Work with underlying complex numbers `Œ≥`
  simp only [SubmonoidClass.mk_pow, mul_one, one_mul, AddMemClass.coe_add,
    SubringClass.coe_intCast] -- Map to ‚ÑÇ
  -- `Œ≥ ^ 2 = (1 + ‚àöd) ^ 2 / 4`
  have : ((1 + (d : ‚ÑÇ) ^ (1 / 2 : ‚ÑÇ)) / 2) ^ 2 = ((1 + (d : ‚ÑÇ) ^ (1 / 2 : ‚ÑÇ)) ^ 2) / 4 := by
    rw [div_pow]; congr; norm_cast
  rw [this]
  refine mul_right_cancel‚ÇÄ (b := 4) (OfNat.zero_ne_ofNat 4).symm ?_
  rw [div_mul_cancel‚ÇÄ _ (OfNat.zero_ne_ofNat 4).symm, add_mul]
  norm_cast -- Cast `‚Üë(k hd) * 4` to `‚Üë(k hd * 4)` where possible
  rw [mul_comm (k d) _, hk hd, show (4 : ‚ÑÇ) = (2 : ‚ÑÇ) * 2 by norm_cast, ‚Üê mul_assoc,
    div_mul_cancel‚ÇÄ _ (NeZero.ne' 2).symm, add_mul, one_mul, sq, add_mul, one_mul, mul_add,
    mul_one, ‚Üê sq]
  simp only [one_div, Complex.cpow_ofNat_inv_pow, Int.cast_sub, Int.cast_one]; group

/-- Relation `Œ¥ ^ 3 = k + (1 + k) Œ¥`. -/
private theorem break_trip : (@Œ¥ d) * (@Œ¥ d) * (@Œ¥ d) = (k d) + (1 + (k d)) * (@Œ¥ d) := by
  -- `Œ¥ ^ 3 = Œ¥ * Œ¥ ^ 2 = Œ¥ (k + Œ¥) = k Œ¥ + Œ¥ ^ 2 = k Œ¥ + k + Œ¥ = k + (k + 1) Œ¥`
  rw [‚Üê sq, break_sq hd, mul_one, one_mul, add_mul, ‚Üê sq, break_sq hd]; group

include sqf one

/-- For `d ‚â° 1 [ZMOD 4]`, `a ^ 2 - a - k ‚â† 0` for any rational `a`.
This implies `Œ≥` is not rational. -/
private theorem rat_sq_sub_ne_zero (a : ‚Ñö) : a ^ 2 - a - (k d) ‚â† 0 := by
  by_contra! h -- Assume `a ^ 2 - a - k = 0`
  apply_fun (¬∑ * 4) at h -- Multiply by 4
  rw [sub_mul, zero_mul] at h
  norm_cast at h
  rw [mul_comm (k d) 4, hk hd, sub_eq_zero] at h -- `4a ^ 2 - 4a = 4k = d - 1`
  apply_fun (¬∑ + 1) at h -- Add 1 to both sides
  rw [Int.cast_sub, Int.cast_one, sub_add_cancel, sub_mul] at h -- `4a ^ 2 - 4a + 1 = d`
  have eq_sq : a ^ 2 * 4 - a * 4 + 1 = (2 * a - 1) ^ 2 := by -- Recognize LHS as a square
    rw [sq, sq, sub_mul, mul_sub, one_mul, mul_one, sub_sub, ‚Üê add_sub_assoc,
      sub_sub_eq_add_sub, ‚Üê mul_two, mul_comm 2 a, ‚Üê mul_assoc, mul_comm (a * 2) a,
      ‚Üê mul_assoc, add_sub_right_comm, mul_assoc _ _ 2, mul_assoc _ _ 2]
    norm_cast
  rw [eq_sq, ‚Üê sub_eq_zero] at h -- `(2a - 1) ^ 2 - d = 0`
  -- This contradicts `rat_sq_sub_ne_zero` from the `Q` namespace with input `2a - 1`.
  exact (Q.rat_sq_sub_ne_zero sqf one (2 * a - 1)) h

/-- `polyz = X ^ 2 - X - k` is irreducible over ‚Ñ§. -/
private theorem polyz_irr : Irreducible (polyz d) := by
  -- Use Gauss's lemma
  refine Monic.irreducible_of_irreducible_map (algebraMap ‚Ñ§ ‚Ñö)
    (polyz d) polyz_Monic <|
    -- Check irreducibility of `polyq = X ^ 2 - X - k` over ‚Ñö
    (irreducible_iff_roots_eq_zero_of_degree_le_three ?_ ?_).2 ?_
  <;> (try rw [polyq_natDegree]); (try omega) -- Degree is 2
  ¬∑ refine Multiset.eq_zero_iff_forall_notMem.2 (fun a ‚Ü¶ ?_) -- Show no roots in ‚Ñö
    by_contra! -- Assume `a` is a root
    simp only [algebraMap_int_eq, Polynomial.map_sub, eq_intCast, Int.cast_one, one_mul,
      Polynomial.map_pow, map_X, Polynomial.map_intCast, mem_roots', ne_eq, IsRoot.def,
      eval_sub, eval_pow, eval_X, eval_intCast] at this
    -- If `a` is a root, then `a ^ 2 - a - k = 0`
    exact (rat_sq_sub_ne_zero sqf one hd a) this.2 -- Contradicts previous lemma

/-- The degree of the minimal polynomial of `Œ≥` over `‚Ñ§` is exactly 2. -/
private theorem min_polyz_natDegree : (minpoly ‚Ñ§ Œ≥).natDegree = 2 := by
  refine le_antisymm (min_polyz_natDegree_le hd) ?_ -- Know ‚â§ 2, need ‚â• 2
  -- Need to show `Œ≥` is not in ‚Ñ§ (or even ‚Ñö).
  rw [minpoly.two_le_natDegree_iff (integralz hd)]
  rintro ‚ü®x, hx : x = Œ≥‚ü© -- Assume `Œ≥` is rational, `Œ≥ = x ‚àà ‚Ñö`
  -- If `Œ≥ = x`, then `2x = 1 + ‚àöd`, so `2x - 1 = ‚àöd`
  apply_fun (¬∑ * 2) at hx
  simp only [isUnit_iff_ne_zero, ne_eq, OfNat.ofNat_ne_zero, not_false_eq_true,
    IsUnit.div_mul_cancel] at hx -- `2Œ≥ = 1 + ‚àöd`
  apply_fun ((-1 + ¬∑) ^ 2) at hx -- Square `(2Œ≥ - 1)`
  -- `(2Œ≥ - 1) ^ 2 = ‚àöd ^ 2 = d`
  simp only [Pi.pow_apply, one_div, neg_add_cancel_left, Complex.cpow_ofNat_inv_pow] at hx
  rw [‚Üê sub_eq_zero] at hx -- `(2Œ≥ - 1) ^ 2 - d = 0`
  replace hx : (-1 + (x : ‚Ñö) * 2) ^ 2 - (d : ‚Ñö) = 0 := by
    norm_cast; norm_cast at hx
  -- This contradicts `Q.rat_sq_sub_ne_zero`.
  exact Q.rat_sq_sub_ne_zero sqf one (-1 + (x : ‚Ñö) * 2) hx

/-- The dimension of the power basis `zbase` (for ‚Ñ§[Œ≥] over ‚Ñ§) is 2. -/
private theorem base_dim : 2 = dim zbase := by
  rwa [Algebra.adjoin.powerBasis'_dim, min_polyz_natDegree sqf one] -- Dim = degree of minpoly

/-- The second element of the power basis `zbase` is the generator `Œ¥ = Œ≥`. -/
private theorem base_equiv_one : adj (base_dim sqf one hd) = Œ¥ := by
  have : finCongr (base_dim sqf one hd) 1 =
    ‚ü®1, by rw [‚Üê base_dim sqf one hd]; omega‚ü© := rfl
  rw [adj, this, basis_eq_pow zbase _] -- Def of `adj` and basis element
  simp only [pow_one] -- `gen ^ 1 = gen`
  -- Generator of basis is the element itself
  exact Algebra.adjoin.powerBasis'_gen <| integralz hd

/-- Any element `Œ±` in `‚Ñ§[Œ≥]` can be written as `r + s * Œ≥` with `r, s ‚àà ‚Ñ§`. -/
private theorem int_linear_comb (Œ± : Algebra.adjoin ‚Ñ§ {Œ≥}) :
    ‚àÉ r s : ‚Ñ§, Œ± = r + s * (@Œ¥ d) := by
  -- Apply general quadratic representation over ‚Ñ§
  have := quadratic.repr (base_dim sqf one hd) Œ±
  rw [base_equiv_one sqf one] at this -- Substitute the generator
  -- Simplify AlgebraMap and smul
  ¬∑ simp only [algebraMap_int_eq, eq_intCast, SetLike.mk_smul_mk, one_div, zsmul_eq_mul] at this
    convert this -- Check result matches
    simp only [MulMemClass.coe_mul, SubringClass.coe_intCast, one_div]
  exact hd

/-- Elements of `‚Ñ§[Œ≥]` (viewed as complex numbers) are contained in `‚Ñö(‚àöd)`. -/
private theorem adjoin_mem‚ÇÜ (Œ± : Algebra.adjoin ‚Ñ§ {Œ≥}) : Œ±.1 ‚àà ‚Ñö‚üÆ‚àö[d]‚üØ := by
  obtain ‚ü®r, s, hrs‚ü© := int_linear_comb sqf one hd Œ± -- Get `r, s ‚àà ‚Ñ§` representation
  rw [hrs]
  -- `Œ≥ = (1 + ‚àöd) / 2`. `1 ‚àà ‚Ñö(‚àöd), ‚àöd ‚àà ‚Ñö(‚àöd), 2 ‚àà ‚Ñö`. So `Œ≥ ‚àà ‚Ñö(‚àöd)`.
  exact add_mem adjoin_mem‚ÇÇ <| mul_mem adjoin_mem‚ÇÇ <|
    div_mem (add_mem (IntermediateField.one_mem _)
      (mem_adjoin_simple_self ‚Ñö _)) adjoin_mem‚ÇÇ

/-- `Œ≥` viewed as an element of `‚Ñö(‚àöd)`. -/
noncomputable abbrev Œ¥' : ‚Ñö‚üÆ‚àö[d]‚üØ := by
  -- Check `Œ≥ ‚àà ‚Ñö(‚àöd)`
  refine ‚ü®Œ≥, div_mem (add_mem ?_ (mem_adjoin_simple_self ‚Ñö _)) adjoin_mem‚ÇÇ‚ü©
  convert (@adjoin_mem‚ÇÇ 1 ‚àö[d]) -- Check `1 ‚àà ‚Ñö(‚àöd)`
  exact Rat.cast_one.symm

/-- Elements of `‚Ñ§[Œ≥]` are algebraic integers in `‚Ñö(‚àöd)`. -/
private theorem adjoin_of_ring_of_int (x : ‚Ñö‚üÆ‚àö[d]‚üØ) (h : x.1 ‚àà Algebra.adjoin ‚Ñ§ {Œ≥}) :
    x ‚àà (integralClosure ‚Ñ§ ‚Ñö‚üÆ‚àö[d]‚üØ) := by
  -- Represent `x = r + sŒ¥` (`Œ¥ = Œ≥` here)
  obtain ‚ü®r, s, hrs‚ü© := int_linear_comb sqf one hd ‚ü®x, h‚ü©
  have : x = r + s * (@Œ¥' d) := -- Match types
    Subtype.val_inj.1 (by apply Subtype.val_inj.2 hrs)
  rw [this]
  -- `r, s` are integral. `Œ¥' = Œ≥` is integral (`integralz hd`).
  -- Closure is a ring, so `r + sŒ¥'` is integral.
  refine add_mem isIntegral_algebraMap (mul_mem isIntegral_algebraMap ?_)
  -- Check if `Œ¥'` is integral
  rw [mem_integralClosure_iff, ‚Üê isIntegral_algebraMap_iff (@algMap_inj d)]
  exact (integralz hd)

-- Calculate entries of the trace matrix for the basis `{1, Œ≥}`
/-- `Trace(1 * 1) = Trace(1) = 2`. -/
private theorem traceForm_11 :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥}) 1 1 = 2 := by
  rwa [Algebra.traceForm_apply, one_mul, ‚Üê @algebraMap.coe_one ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥}) ..,
    @Algebra.trace_algebraMap ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥}) _ _ _ _ (free_mod hd) 1,
    finrank zbase, ‚Üê base_dim sqf one, nsmul_eq_mul, Nat.cast_ofNat, mul_one]

/-- Helper: The coefficient of `Œ≥` in the representation of `k` is 0.
(`k = k * 1 + 0 * Œ≥`). -/
private theorem aux_traceForm_1Œ¥ :
    ((basis zbase).repr (k d)) (finCongr (base_dim sqf one hd) 1) = 0 := by
  have cast : @Int.cast (Algebra.adjoin ‚Ñ§ {Œ≥}) AddGroupWithOne.toIntCast (k d) =
    ((algebraMap ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥})) (k d)) * 1 := by -- `k = k * 1`
      rw [algebraMap_int_eq, eq_intCast, mul_one]
  have neq : finCongr (base_dim sqf one hd) 0 ‚â†
    finCongr (base_dim sqf one hd) 1 := ne_of_beq_false rfl
  replace this := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one hd) 0) -- Basis element 1
    (finCongr (base_dim sqf one hd) 1) -- Index 1
  rw [ite_cond_eq_false _ _ (eq_false neq)] at this -- `(repr 1)‚ÇÅ = 0`
  -- `(repr k)‚ÇÅ = k * (repr 1)‚ÇÅ = 0`
  rw [cast, Module.Basis.repr_smul', ‚Üê base_equiv_zero (base_dim sqf one hd), this, mul_zero]

/-- Helper: The coefficient of `Œ≥` in the representation of `Œ≥ ^ 2` is 1.
(`Œ≥ ^ 2 = k * 1 + 1 * Œ≥`). -/
private theorem aux_traceForm_1Œ¥' :
    ((basis zbase).repr (Œ¥ * Œ¥)) (finCongr (base_dim sqf one hd) 1) = 1 := by
  rw [‚Üê sq, break_sq hd] -- `Œ≥ ^ 2 = k * 1 + 1 * Œ≥`
  simp only [mul_one, one_mul, map_add, Fin.isValue, Finsupp.coe_add, Pi.add_apply]
  -- Need `(repr k)‚ÇÅ + (repr Œ≥)‚ÇÅ`
  have neq : finCongr (base_dim sqf one hd) 0 ‚â†
    finCongr (base_dim sqf one hd) 1 := ne_of_beq_false rfl
  replace this := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one hd) 1) -- Basis element `Œ≥`
    (finCongr (base_dim sqf one hd) 1) -- Index 1
  -- `(repr Œ≥)‚ÇÅ = 1`
  rw [ite_cond_eq_true _ _ (eq_self (finCongr (base_dim sqf one hd) 1))] at this
  -- `(repr k)‚ÇÅ = 0`. Result `0 + 1 = 1`.
  rw [‚Üê base_equiv_one sqf one hd, adj, this, aux_traceForm_1Œ¥ sqf one hd, zero_add]

/-- Helper: The coefficient of 1 in the representation of `Œ≥` is 0.
(`Œ≥ = 0 * 1 + 1 * Œ≥`). -/
private theorem aux_traceForm_1Œ¥'' :
    ((basis zbase).repr Œ¥) (finCongr (base_dim sqf one hd) 0) = 0 := by
  have neq : finCongr (base_dim sqf one hd) 0 ‚â†
      finCongr (base_dim sqf one hd) 1 := ne_of_beq_false rfl
  have := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one hd) 1) -- Basis element `Œ≥`
    (finCongr (base_dim sqf one hd) 0) -- Index 0
  rw [ite_cond_eq_false _ _ (eq_false neq.symm)] at this -- `(repr Œ≥)‚ÇÄ = 0`
  rw [‚Üê base_equiv_one sqf one hd, adj, this]

/-- `Trace(1 * Œ≥) = Trace(Œ≥) = 1`. -/
private theorem traceForm_1Œ¥ :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥}) 1 Œ¥ = 1 := by
  rw [Algebra.traceForm_apply, one_mul, Algebra.trace_eq_matrix_trace (basis zbase)
    Œ¥, Matrix.trace, finChange (base_dim sqf one hd)] -- Use matrix trace
  -- Sum diagonal
  simp only [Equiv.toFun_as_coe, Matrix.diag_apply, Fin.sum_univ_two, Fin.isValue]
  -- Suppose matrix of left multiplication by `Œ≥` in basis `{1, Œ≥}` is M
  -- Need `M‚ÇÄ‚ÇÄ` and `M‚ÇÅ‚ÇÅ`
  rw [Algebra.leftMulMatrix_eq_repr_mul, Algebra.leftMulMatrix_eq_repr_mul,
    base_equiv_zero (base_dim sqf one hd), mul_one]
  -- `M‚ÇÄ‚ÇÄ = (repr Œ≥)‚ÇÄ`, `M‚ÇÅ‚ÇÅ = (repr (Œ≥ * Œ≥))‚ÇÅ`
  rw [aux_traceForm_1Œ¥'' sqf one hd, zero_add, ‚Üê adj, base_equiv_one sqf one hd]
  -- Trace = `M‚ÇÄ‚ÇÄ + M‚ÇÅ‚ÇÅ = 0 + 1 = 1`
  exact aux_traceForm_1Œ¥' sqf one hd

/-- `Trace(Œ≥ * 1) = Trace(Œ≥) = 1`. -/
private theorem traceForm_Œ¥1 :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥}) Œ¥ 1 = 1 := by
  -- via symmetric
  simpa only [Algebra.traceForm_apply, mul_one, one_mul] using traceForm_1Œ¥ sqf one hd

/-- Helper: The coefficient of 1 in the representation of `Œ≥ ^ 2` is `k`.
(`Œ≥ ^ 2 = k * 1 + 1 * Œ≥`). -/
private theorem aux_traceForm_Œ¥Œ¥ :
    ((basis zbase).repr (Œ¥ * Œ¥)) (finCongr (base_dim sqf one hd) 0) = (k d) := by
  rw [‚Üê sq, break_sq hd]
  simp only [mul_one, one_mul, map_add, Fin.isValue, Finsupp.coe_add, Pi.add_apply]
  -- Need `(repr k)‚ÇÄ + (repr Œ≥)‚ÇÄ`
  have cast : @Int.cast (Algebra.adjoin ‚Ñ§ {Œ≥}) AddGroupWithOne.toIntCast (k d) =
    ((algebraMap ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥})) (k d)) * 1 := by -- `k = k * 1`
      rw [algebraMap_int_eq, eq_intCast, mul_one]
  replace this := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one hd) 0) -- Basis element 1
    (finCongr (base_dim sqf one hd) 0) -- Index 0
  -- `(repr 1)‚ÇÄ = 1`
  rw [ite_cond_eq_true _ _ (eq_self (finCongr (base_dim sqf one hd) 0))] at this
  rw [aux_traceForm_1Œ¥'' sqf one hd, cast, Module.Basis.repr_smul',
    ‚Üê base_equiv_zero (base_dim sqf one hd), this, mul_one, add_zero]

/-- `Trace(Œ≥ * Œ≥) = Trace(Œ≥ ^ 2) = Trace(k + Œ≥) = Trace(k) + Trace(Œ≥) = 2k + 1`. -/
private theorem traceForm_Œ¥Œ¥ :
    Algebra.traceForm ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥}) Œ¥ Œ¥ = 1 + 2 * (k d) := by
  rw [Algebra.traceForm_apply, Algebra.trace_eq_matrix_trace (basis zbase)
    _, Matrix.trace, finChange (base_dim sqf one hd)]
  simp only [Equiv.toFun_as_coe, Matrix.diag_apply, Fin.sum_univ_two, Fin.isValue]
  rw [Algebra.leftMulMatrix_eq_repr_mul, Algebra.leftMulMatrix_eq_repr_mul,
    base_equiv_zero (base_dim sqf one hd), mul_one, aux_traceForm_Œ¥Œ¥ sqf one hd,
    ‚Üê adj, base_equiv_one sqf one hd, break_trip hd]
  simp only [map_add, Fin.isValue, Finsupp.coe_add, Pi.add_apply]
  rw [aux_traceForm_1Œ¥ sqf one hd, zero_add, ‚Üê base_equiv_one sqf one hd, adj]
  replace cast : @OfNat.ofNat (Algebra.adjoin ‚Ñ§ {Œ≥}) 1 One.toOfNat1 +
    @Int.cast (Algebra.adjoin ‚Ñ§ {Œ≥}) AddGroupWithOne.toIntCast (k d) =
    ((algebraMap ‚Ñ§ (Algebra.adjoin ‚Ñ§ {Œ≥})) (1 + (k d))) := by
      rw [algebraMap_int_eq, eq_intCast, Int.cast_add, Int.cast_one]
  have := Module.Basis.repr_self_apply (basis zbase)
    (finCongr (base_dim sqf one hd) 1) -- Basis element `Œ≥`
    (finCongr (base_dim sqf one hd) 1) -- Index 1
  -- `(repr Œ≥)‚ÇÅ = 1`
  rw [ite_cond_eq_true _ _ (eq_self (finCongr (base_dim sqf one hd) 1))] at this
  -- `(repr (1+k) * Œ≥)‚ÇÅ = (1 + k) * (repr Œ≥)‚ÇÅ = 1 + k`
  rw [cast, Module.Basis.repr_smul', this, mul_one, add_comm, add_assoc, Int.two_mul (k d)]

variable (d) in
/-- The trace matrix for the basis `{1, Œ≥}` is `[[2, 1], [1, 1 + 2k]]`. -/
noncomputable def traceMat : Matrix (Fin 2) (Fin 2) ‚Ñ§ := !![2, 1; 1, 1 + 2 * (k d)]

/-- The trace matrix calculated using `Algebra.traceMatrix` matches `traceMat`. -/
private theorem mat_conv :
  (Matrix.reindexAlgEquiv ‚Ñ§ ‚Ñ§ (finCongr (base_dim sqf one hd)).symm)
    (Algebra.traceMatrix ‚Ñ§ (basis zbase)) = traceMat d := Matrix.ext fun i j ‚Ü¶ by
  fin_cases i <;> fin_cases j -- Check all 4 entries
  all_goals simp only [Fin.zero_eta, Fin.isValue, Fin.mk_one,
    Matrix.reindexAlgEquiv_apply, Matrix.reindex_apply, Equiv.symm_symm, Matrix.submatrix_apply]
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, base_equiv_zero (base_dim sqf one hd)]
    exact traceForm_11 sqf one hd
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, base_equiv_zero (base_dim sqf one hd), ‚Üê adj,
      base_equiv_one sqf one hd]
    exact traceForm_1Œ¥ sqf one hd
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, base_equiv_zero (base_dim sqf one hd), ‚Üê adj,
      base_equiv_one sqf one hd]
    exact traceForm_Œ¥1 sqf one hd
  ¬∑ rw [Algebra.traceMatrix, Matrix.of_apply, ‚Üê adj, base_equiv_one sqf one hd]
    exact traceForm_Œ¥Œ¥ sqf one hd

/-- The discriminant of the ‚Ñ§-basis `{1, Œ≥}` is
`det(traceMatrix) = 2(1 + 2k) - 1 * 1 = 2 + 4k - 1 = 1 + 4k = d`. -/
private theorem discr_z : Algebra.discr ‚Ñ§ (basis zbase) = d := by
  have := Matrix.det_reindexAlgEquiv ‚Ñ§ ‚Ñ§ (finCongr (base_dim sqf one hd)).symm
    (Algebra.traceMatrix ‚Ñ§ (basis zbase)) -- Det is invariant under reindexing
  rw [Algebra.discr_def, ‚Üê this, mat_conv sqf one hd, traceMat, Matrix.det_fin_two_of,
    mul_add, mul_one, mul_one, ‚Üê mul_assoc, show (2 : ‚Ñ§) * 2 = 4 by rfl, hk hd]; group

/-- The ring of integers of `‚Ñö(‚àöd)` is `‚Ñ§[Œ≥]` = `‚Ñ§[(1 + ‚àöd) / 2]` when `d ‚â° 1 [ZMOD 4]`. -/
theorem ring_of_int (x : ‚Ñö‚üÆ‚àö[d]‚üØ) : x ‚àà (integralClosure ‚Ñ§ ‚Ñö‚üÆ‚àö[d]‚üØ) ‚Üî
  x.1 ‚àà Algebra.adjoin ‚Ñ§ {Œ≥} := by
  constructor
  ¬∑ intro h -- Assume `x` is an integer
    by_cases hx : x ‚àà (algebraMap ‚Ñö ‚Ñö‚üÆ‚àö[d]‚üØ).range -- Case 1: `x` is rational
    ¬∑ exact adjoin_mem‚ÇÅ hx h -- Rational integer is in `‚Ñ§ ‚äÇ ‚Ñ§[Œ≥]`
    ¬∑ -- Case 2: `x` is not rational. Use `x = (a + b‚àöd) / c` representation.
      -- `c ‚à£ 2 and c ^ 2 ‚à£ a ^ 2 - (b ^ 2) d`
      obtain ‚ü®c_div, hdvd‚ü© := minpoly_of_int' sqf one hx h
      obtain ‚ü®hm, hc, ‚ü®hn‚ÇÅ, hn‚ÇÇ‚ü©‚ü© := Q.calc_min_prop sqf one hx -- Get `a, b, c` properties
      have c_le := Nat.le_of_dvd Nat.zero_lt_two c_div -- `c = 1` or `c = 2`
      set c := (Q.calc_min sqf one hx).2.2
      match hmatch : c with
      | 0 => exact False.elim (hc rfl) -- `c ‚â† 0`
      | 1 => -- If `c = 1, x = a + b‚àöd`. Need `a + b‚àöd ‚àà ‚Ñ§[Œ≥]`.
             -- Since `‚àöd = 2Œ≥ - 1, a + b‚àöd = a + b(2Œ≥ - 1) = (a - b) + 2bŒ≥ ‚àà ‚Ñ§[Œ≥]`.
        simp only [Nat.cast_one, Rat.cast_one, div_one] at hn‚ÇÇ
        rw [hn‚ÇÇ]
        -- `a ‚àà ‚Ñ§[Œ≥], b ‚àà ‚Ñ§[Œ≥], ‚àöd ‚àà ‚Ñ§[Œ≥]`
        exact add_mem adjoin_mem‚ÇÄ <| mul_mem adjoin_mem‚ÇÄ adjoin_mem‚ÇÑ
      | 2 => -- If `c = 2, x = (a + b‚àöd) / 2`.
             -- We have `4 ‚à£ a ^ 2 - (b ^ 2) d` and `gcd(a, b, 2) = 1`.
             -- By `aux_congruent`, `a` and `b` must be odd.
             -- By `adjoin_mem‚ÇÖ`, if `a, b` odd, then `(a + b‚àöd) / 2 ‚àà ‚Ñ§[Œ≥]`.
        rw [hn‚ÇÇ]
        exact adjoin_mem‚ÇÖ <| aux_congruent sqf hdvd hn‚ÇÅ
  ¬∑ exact adjoin_of_ring_of_int sqf one hd x -- Converse: elements of ‚Ñ§[Œ≥] are integers

/-- The ring of integers `ùìû ‚Ñö(‚àöd)` is ‚Ñ§-algebra isomorphic to `‚Ñ§[Œ≥]` when `d ‚â° 1 [ZMOD 4]`. -/
noncomputable def ring_of_int' : ùìû ‚Ñö‚üÆ‚àö[d]‚üØ ‚âÉ‚Çê[‚Ñ§] Algebra.adjoin ‚Ñ§ {Œ≥} where
  toFun x := ‚ü®x, (ring_of_int sqf one hd x).1 x.2‚ü© -- Map integer `x` to itself in ‚Ñ§[Œ≥]
  invFun y := ‚ü®‚ü®y.1, adjoin_mem‚ÇÜ sqf one hd y‚ü©, -- Map `y ‚àà ‚Ñ§[Œ≥]` to `‚ü®y.1, _‚ü©` in `ùìû ‚Ñö(‚àöd)`
    (ring_of_int sqf one hd ‚ü®y.1, adjoin_mem‚ÇÜ sqf one hd y‚ü©).2 y.2‚ü© -- Proof it's an integer
  left_inv _ := rfl
  right_inv _ := rfl
  map_mul' _ _ := rfl
  map_add' _ _ := rfl
  commutes' _ := rfl

/-- An integral basis for `ùìû ‚Ñö(‚àöd)` obtained by mapping the basis `{1, Œ≥}` of `‚Ñ§[Œ≥]`. -/
noncomputable abbrev intbase :=
  PowerBasis.map zbase (ring_of_int' sqf one hd).symm

/-- The discriminant of `‚Ñö(‚àöd)` is `d` when `d ‚â° 1 [ZMOD 4]`. -/
theorem final : NumberField.discr ‚Ñö‚üÆ‚àö[d]‚üØ = d := by
  -- Discriminant is invariant under isomorphism, use the basis for ‚Ñ§[Œ≥].
  rw [‚Üê discr_eq_discr ‚Ñö‚üÆ‚àö[d]‚üØ (intbase sqf one hd).basis, intbase]
  simp only [map_dim, map_basis] -- Properties of `PowerBasis.map`
  have : (basis zbase).map (ring_of_int' sqf one hd).symm.toLinearEquiv =
    (ring_of_int' sqf one hd).symm ‚àò (basis zbase) := by -- How map interacts with basis
    funext x
    simp only [Algebra.adjoin.powerBasis'_dim, Module.Basis.map_apply, AlgEquiv.toLinearEquiv_apply,
      Function.comp_apply]
  -- Discr invariant under `AlgEquiv`
  rw [this, ‚Üê Algebra.discr_eq_discr_of_algEquiv (basis zbase) (ring_of_int' sqf one hd).symm]
  exact discr_z sqf one hd -- Use the calculated discriminant for `zbase`

end Z‚ÇÇ

end nontrivial

include sqf in
/-- The discriminant of the quadratic field `‚Ñö(‚àöd)` for square-free `d`.
- If `d ‚â° 1 [ZMOD 4]`, the discriminant is `d`.
- If `¬¨ d ‚â° 1 [ZMOD 4]`, the discriminant is `4d`. -/
theorem quadratic_discr :
    (  d ‚â° 1 [ZMOD 4] ‚Üí NumberField.discr ‚Ñö‚üÆ‚àö[d]‚üØ = d) ‚àß
    (¬¨ d ‚â° 1 [ZMOD 4] ‚Üí NumberField.discr ‚Ñö‚üÆ‚àö[d]‚üØ = 4 * d) := by
  by_cases one : d ‚â† 1 -- The previous proofs assumed `d ‚â† 1`.
  ¬∑ -- Case `d ‚â† 1`: Apply results from `Z‚ÇÅ` and `Z‚ÇÇ`.
    exact ‚ü®Z‚ÇÇ.final sqf one, Z‚ÇÅ.final sqf one‚ü©
  ¬∑ -- Case `d = 1`: `‚Ñö(‚àö1) = ‚Ñö(1) = ‚Ñö`.
    simp only [ne_eq, Decidable.not_not] at one
    constructor
    ¬∑ -- If `d ‚â° 1 [ZMOD 4]` (which 1 is), then `discr = d = 1`.
      intro hcong
      rw [one, ‚Üê discr_rat] -- `discr ‚Ñö = 1`
      -- Show `‚Ñö(‚àö1) = ‚Ñö`
      refine discr_eq_discr_of_algEquiv _ ?_
      rw [discr_rat]
      -- `‚Ñö(‚àö1) = ‚Ñö(1) = ‚Ñö = ‚ä•` (as subfield of ‚ÑÇ)
      have : ‚Ñö‚üÆ((1 : ‚Ñ§) ^ (1 / 2 : ‚ÑÇ) : ‚ÑÇ)‚üØ = ‚ä• := by
        rw [‚Üê le_bot_iff, adjoin_le_iff]
        simp only [Int.cast_one, one_div, Complex.one_cpow, Set.singleton_subset_iff,
          SetLike.mem_coe]
        exact IntermediateField.one_mem _
      -- Use `equiv ‚Ñö(‚àö1) = ‚ä•` and `‚ä• = ‚Ñö`
      exact (equivOfEq this).trans (botEquiv ‚Ñö ‚ÑÇ)
    ¬∑ -- If `¬¨(d ‚â° 1 [ZMOD 4])` (which is false for `d = 1`), the implication is true.
      intro hcong
      rw [one] at hcong; tauto -- `1 ‚â° 1 [ZMOD 4]`, so `¬¨(1 ‚â° 1 [ZMOD 4])` is false.
